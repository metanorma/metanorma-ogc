---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/index-v1.zip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '7575'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - application/zip
      Etag:
      - W/"de8c7d5d18d87e0b4317c5577599a34f6c0c1210d3b2ba0f4dbda64edf64dc5c"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 35B8:171052:1F64C9:26D362:6596389D
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:30 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11241-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1704343711.719876,VS0,VE239
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - bfa2c575e89be4fee1880a8cdd200ed4f1c40b70
      Expires:
      - Thu, 04 Jan 2024 04:53:30 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:30 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/index-v1.zip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '7575'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - application/zip
      Etag:
      - W/"de8c7d5d18d87e0b4317c5577599a34f6c0c1210d3b2ba0f4dbda64edf64dc5c"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 35B8:171052:1F64C9:26D362:6596389D
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:30 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11259-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1704343711.696078,VS0,VE263
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 55c5d05d2180491c6f4189902b0b0800a3eabdcd
      Expires:
      - Thu, 04 Jan 2024 04:53:30 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:30 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/index-v1.zip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '7575'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - application/zip
      Etag:
      - W/"de8c7d5d18d87e0b4317c5577599a34f6c0c1210d3b2ba0f4dbda64edf64dc5c"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 35B8:171052:1F64C9:26D362:6596389D
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:30 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11259-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1704343711.677066,VS0,VE282
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - f4520e2f0da4f9ac86baea2ee758c3454a78e831
      Expires:
      - Thu, 04 Jan 2024 04:53:30 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:30 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-165R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1837'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"07ed08a4e8fe8e848143df1b312ae626d98a0f862f1287c107191b3b78f440c2"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - BAE0:17BA39:30124C:3BC8CC:65963897
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:31 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11253-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1704343711.322016,VS0,VE296
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 6397668ca8b063a4decc8f3e71cf9af55bf95d87
      Expires:
      - Thu, 04 Jan 2024 04:53:31 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.7
        id: 11-165r2
        title:
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: http://www.opengis.net/doc/is/netcdf-data-model-extension/1.0
          type: src
        - content: https://portal.ogc.org/files/?artifact_id=51908
          type: obp
        type: standard
        docid:
        - id: 11-165r2
          type: OGC
          primary: true
        date:
        - type: published
          value: '2013-01-03'
        contributor:
        - person:
            name:
              completename:
                content: 'Ben Domenico and Stefano Nativi '
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        edition:
          content: '2'
        revdate: '2013-01-03'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "The OGC netCDF encoding supports electronic encoding of geospatial data,
            that is, digital geospatial information representing space and time-varying phenomena.\r\nThis
            standard specifies the CF-netCDF data model extension. \r\nThis standard specifies
            the CF-netCDF data model mapping onto the ISO 19123 coverage schema. \r\nThis
            standard deals with multi-dimensional gridded data and multi-dimensional multi-point
            data.\r\nIn particular, this extension standard encoding profile is limited to
            multi-point, and regular and warped grids; however, irregular grids are important
            in the CF-netCDF community and work is underway to expand the CF-netCDF to encompass
            other coverages types, including irregular gridded datasets.\r\n"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype:
          type: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Thu, 04 Jan 2024 04:48:31 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-157.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1595'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"6d804beb9cc186e717e8a71ed3c8ee099e625f98d27c3c2162d268428d3e99ca"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - E07C:3B4136:6621A4:819C57:6596389B
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:31 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11256-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1704343711.322809,VS0,VE307
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 22c93e93d5307c1a057c4ff1e934b74f0640b993
      Expires:
      - Thu, 04 Jan 2024 04:53:31 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.7
        id: 11-157
        title:
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-intro
        - content: Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0 - Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: ''
          type: src
        - content: https://portal.ogc.org/files/?artifact_id=46435
          type: obp
        type: standard
        docid:
        - id: 11-157
          type: OGC
          primary: true
        date:
        - type: published
          value: '2011-10-18'
        contributor:
        - person:
            name:
              completename:
                content: Jim Greenwood
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        revdate: '2011-10-18'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "This document being corrected specifies many of the aspects that are,
            or should be, common to all or multiple OWS interface Implementation Specifications.
            The Common Implementation Specification aspects specified by this document currently
            include:\r\na) Operation request and response contents, most partial\r\nb) Parameters
            and data structures included in operation requests and responses c) XML and KVP
            encoding of operation requests and responses"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype:
          type: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Thu, 04 Jan 2024 04:48:31 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/17-080R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1439'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"a48be49c4c249cf245bc994feb10aab6c173e448f80315906203a6220e43be4a"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 3A68:E549E:41A130:528767:6596389D
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 04 Jan 2024 04:48:31 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11241-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1704343711.321755,VS0,VE299
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 28645aec3b241b1812cca9ece94b3b6a01d78fdd
      Expires:
      - Thu, 04 Jan 2024 04:53:31 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjcKaWQ6IDE3LTA4MHIyCnRpdGxlOgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogdGl0bGUtbWFpbgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogbWFpbgpsaW5rOgotIGNvbnRlbnQ6IGh0dHA6Ly93d3cub3Blbmdpcy5uZXQvZG9jL0lTL2NkYi1tdWx0aXNwZWN0cmFsLWV4dGVuc2lvbi8xLjAKICB0eXBlOiBzcmMKLSBjb250ZW50OiBodHRwczovL2RvY3Mub2djLm9yZy9pcy8xNy0wODByMi8xNy0wODByMi5odG1sCiAgdHlwZTogb2JwCnR5cGU6IHN0YW5kYXJkCmRvY2lkOgotIGlkOiAxNy0wODByMgogIHR5cGU6IE9HQwogIHByaW1hcnk6IHRydWUKZGF0ZToKLSB0eXBlOiBwdWJsaXNoZWQKICB2YWx1ZTogJzIwMTgtMDktMjAnCmNvbnRyaWJ1dG9yOgotIHBlcnNvbjoKICAgIG5hbWU6CiAgICAgIGNvbXBsZXRlbmFtZToKICAgICAgICBjb250ZW50OiBSeWFuIEZyYW56CiAgcm9sZToKICAtIHR5cGU6IGF1dGhvcgotIG9yZ2FuaXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNvbnRlbnQ6IE9wZW4gR2Vvc3BhdGlhbCBDb25zb3J0aXVtCiAgcm9sZToKICAtIHR5cGU6IHB1Ymxpc2hlcgplZGl0aW9uOgogIGNvbnRlbnQ6ICcyJwpyZXZkYXRlOiAnMjAxOC0wOS0yMCcKbGFuZ3VhZ2U6Ci0gZW4Kc2NyaXB0OgotIExhdG4KYWJzdHJhY3Q6Ci0gY29udGVudDogJ1RoZSDigJxNdWx0aS1TcGVjdHJhbCBJbWFnZXJ54oCdIGV4dGVuc2lvbiBkZWZpbmVzIGhvdyB0byBlbmNvZGUgYW5kIHN0b3JlCiAgICByZWZsZWN0ZWQgZWxlY3Ryb21hZ25ldGljIHJhZGlhdGlvbiBmcm9tIHRoZSBpbmZyYXJlZCB3YXZlbGVuZ3RocyBpbnRvIGEgQ0RCLiAgVGhlCiAgICBwb3J0aW9uIG9mIHRoZSBzcGVjdHJ1bSB0YXJnZXRlZCBpcyBiZXR3ZWVuIHRoZSB2aXNpYmxlIHNwZWN0cnVtIChjdXJyZW50IGltYWdlcnkKICAgIGFuZCB0ZXh0dXJlIGluIENEQiksIGFuZCBsb25nZXIgd2F2ZWxlbmd0aCBpbmZyYXJlZCB0aGF0IGlzIHByaW1hcmlseSBlbWlzc2l2ZQogICAgYW5kIGNhbiBiZSBzaW11bGF0ZWQgYmFzZWQgb24gdGhlIG1hdGVyaWFsIHRlbXBlcmF0dXJlLiAnCiAgbGFuZ3VhZ2U6CiAgLSBlbgogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KZG9jdHlwZToKICB0eXBlOiBzdGFuZGFyZApzdWJkb2N0eXBlOiBpbXBsZW1lbnRhdGlvbgplZGl0b3JpYWxncm91cDoKICBjb21taXR0ZWU6IHRlY2huaWNhbApleHQ6CiAgc2NoZW1hLXZlcnNpb246IHYxLjAuMQo=
  recorded_at: Thu, 04 Jan 2024 04:48:31 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 04 Jan 2024 04:48:32 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:32 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 04 Jan 2024 04:48:32 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:32 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 04 Jan 2024 04:48:32 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:32 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=053570A8A28107719768B93B449E02B8; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 04 Jan 2024 04:48:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 04 Jan 2024 04:48:34 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/85/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=FB39EB1F751E20C92555335C4784E855; Path=/; Secure; HttpOnly
      Location:
      - "/standard/78501.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 04 Jan 2024 04:48:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 04 Jan 2024 04:48:34 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=726D4ED28BD46A0389FE6AE34A364A51; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 04 Jan 2024 04:48:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 04 Jan 2024 04:48:34 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B5B295AAAEF50618AFB60A818FBFE2BA; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 04 Jan 2024 04:48:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:36 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=39C31D1CAD4A9F7DB3483D658836BF3F; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 04 Jan 2024 04:48:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:36 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=ECE7B0A40934655BAC30AAC7434EA31B; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 04 Jan 2024 04:48:35 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:36 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 04 Jan 2024 04:48:37 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '11'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:37 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=4E0CD0272DF4650477EE417F22958A6A; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 04 Jan 2024 04:48:44 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 04 Jan 2024 04:48:44 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=1F19FF0E8196185EB6719ACF0227B318; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 04 Jan 2024 04:48:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jan 2024 04:48:46 GMT
recorded_with: VCR 6.1.0
