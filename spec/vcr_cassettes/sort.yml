---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-165R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '772'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"a85b6ed19706c7bdc3ed30049566b873cb9a8516b09f653b65e888b27e114e74"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '085A:8C54:111C0:1E5CB:6331915B'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 26 Sep 2022 11:47:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-adl2040029-ADL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1664192859.936976,VS0,VE337
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 6a8310dc231ecf4f84d53257d2e6ebe9043b1961
      Expires:
      - Mon, 26 Sep 2022 11:52:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        id: 11-165r2
        title:
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=51908
          type: obp
        type: standard
        docid:
        - id: 11-165r2
          type: OGC
          primary: true
        date:
        - type: published
          value: '2013-01-03'
        contributor:
        - person:
            name:
              completename:
                content: 'Ben Domenico and Stefano Nativi '
          role:
          - author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - publisher
        edition:
          content: '2'
        revdate: '2013-01-03'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "The OGC netCDF encoding supports electronic encoding of geospatial data,
            that is, digital geospatial information representing space and time-varying phenomena.\r\nThis
            standard specifies the CF-netCDF data model extension. \r\nThis standard specifies
            the CF-netCDF data model mapping onto the ISO 19123 coverage schema. \r\nThis
            standard deals with multi-dimensional gridded data and multi-dimensional multi-point
            data.\r\nIn particular, this extension standard encoding profile is limited to
            multi-point, and regular and warped grids; however, irregular grids are important
            in the CF-netCDF community and work is underway to expand the CF-netCDF to encompass
            other coverages types, including irregular gridded datasets.\r\n"
          language:
          - en
          script:
          - Latn
          format: text/plain
        fetched: '2022-09-25'
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
  recorded_at: Mon, 26 Sep 2022 11:47:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/17-080R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '618'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"ad0aaa47b89775d1c6785438a07b9194c88a980e227ea172c3dfbf53f383b949"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '0810:122D:1896A:27A28:6331915B'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 26 Sep 2022 11:47:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-adl2040028-ADL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1664192859.937194,VS0,VE338
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 8fb4a4e732226e7827e616e8d06836c59fcc940d
      Expires:
      - Mon, 26 Sep 2022 11:52:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCmlkOiAxNy0wODByMgp0aXRsZToKLSBjb250ZW50OiBDREIgTXVsdGktU3BlY3RyYWwgSW1hZ2VyeSBFeHRlbnNpb24KICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IHRpdGxlLW1haW4KLSBjb250ZW50OiBDREIgTXVsdGktU3BlY3RyYWwgSW1hZ2VyeSBFeHRlbnNpb24KICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IG1haW4KbGluazoKLSBjb250ZW50OiBodHRwczovL2RvY3Mub2djLm9yZy9pcy8xNy0wODByMi8xNy0wODByMi5odG1sCiAgdHlwZTogb2JwCnR5cGU6IHN0YW5kYXJkCmRvY2lkOgotIGlkOiAxNy0wODByMgogIHR5cGU6IE9HQwogIHByaW1hcnk6IHRydWUKZGF0ZToKLSB0eXBlOiBwdWJsaXNoZWQKICB2YWx1ZTogJzIwMTgtMDktMjAnCmNvbnRyaWJ1dG9yOgotIHBlcnNvbjoKICAgIG5hbWU6CiAgICAgIGNvbXBsZXRlbmFtZToKICAgICAgICBjb250ZW50OiBSeWFuIEZyYW56CiAgcm9sZToKICAtIGF1dGhvcgotIG9yZ2FuaXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNvbnRlbnQ6IE9wZW4gR2Vvc3BhdGlhbCBDb25zb3J0aXVtCiAgcm9sZToKICAtIHB1Ymxpc2hlcgplZGl0aW9uOgogIGNvbnRlbnQ6ICcyJwpyZXZkYXRlOiAnMjAxOC0wOS0yMCcKbGFuZ3VhZ2U6Ci0gZW4Kc2NyaXB0OgotIExhdG4KYWJzdHJhY3Q6Ci0gY29udGVudDogJ1RoZSDigJxNdWx0aS1TcGVjdHJhbCBJbWFnZXJ54oCdIGV4dGVuc2lvbiBkZWZpbmVzIGhvdyB0byBlbmNvZGUgYW5kIHN0b3JlCiAgICByZWZsZWN0ZWQgZWxlY3Ryb21hZ25ldGljIHJhZGlhdGlvbiBmcm9tIHRoZSBpbmZyYXJlZCB3YXZlbGVuZ3RocyBpbnRvIGEgQ0RCLiAgVGhlCiAgICBwb3J0aW9uIG9mIHRoZSBzcGVjdHJ1bSB0YXJnZXRlZCBpcyBiZXR3ZWVuIHRoZSB2aXNpYmxlIHNwZWN0cnVtIChjdXJyZW50IGltYWdlcnkKICAgIGFuZCB0ZXh0dXJlIGluIENEQiksIGFuZCBsb25nZXIgd2F2ZWxlbmd0aCBpbmZyYXJlZCB0aGF0IGlzIHByaW1hcmlseSBlbWlzc2l2ZQogICAgYW5kIGNhbiBiZSBzaW11bGF0ZWQgYmFzZWQgb24gdGhlIG1hdGVyaWFsIHRlbXBlcmF0dXJlLiAnCiAgbGFuZ3VhZ2U6CiAgLSBlbgogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KZmV0Y2hlZDogJzIwMjItMDktMjUnCmRvY3R5cGU6IHN0YW5kYXJkCnN1YmRvY3R5cGU6IGltcGxlbWVudGF0aW9uCmVkaXRvcmlhbGdyb3VwOgogIGNvbW1pdHRlZTogdGVjaG5pY2FsCg==
  recorded_at: Mon, 26 Sep 2022 11:47:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-157.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '667'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"8f96b45c55176bc1254467db54b979089ab491d989633b3472eb672629bec749"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '0828:02E7:12C0F:20212:6331915B'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 26 Sep 2022 11:47:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-adl2040029-ADL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1664192859.937488,VS0,VE336
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - f7824217f37da955e6459bd852ae33062bbca978
      Expires:
      - Mon, 26 Sep 2022 11:52:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        id: 11-157
        title:
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-intro
        - content: Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0 - Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=46435
          type: obp
        type: standard
        docid:
        - id: 11-157
          type: OGC
          primary: true
        date:
        - type: published
          value: '2011-10-18'
        contributor:
        - person:
            name:
              completename:
                content: Jim Greenwood
          role:
          - author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - publisher
        revdate: '2011-10-18'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "This document being corrected specifies many of the aspects that are,
            or should be, common to all or multiple OWS interface Implementation Specifications.
            The Common Implementation Specification aspects specified by this document currently
            include:\r\na) Operation request and response contents, most partial\r\nb) Parameters
            and data structures included in operation requests and responses c) XML and KVP
            encoding of operation requests and responses"
          language:
          - en
          script:
          - Latn
          format: text/plain
        fetched: '2022-09-25'
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
  recorded_at: Mon, 26 Sep 2022 11:47:39 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 26 Sep 2022 11:47:40 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:40 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 26 Sep 2022 11:47:40 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:40 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 26 Sep 2022 11:47:40 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:40 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=FFDDEB06C003FFFC93693DB962E29675; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 26 Sep 2022 13:47:42 CAT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 26 Sep 2022 11:47:42 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/85/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=04F84904A3E9C39597870D1E3199FBF7; Path=/; Secure; HttpOnly
      Location:
      - "/standard/78501.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 26 Sep 2022 13:47:42 CAT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 26 Sep 2022 11:47:42 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F5589008B9BC777224DD623F8F87CD02; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 26 Sep 2022 13:47:42 CAT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 26 Sep 2022 11:47:42 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=0B93B4A2FB8062C3A1C2ACDB4C882652; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 26 Sep 2022 13:47:43 CAT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:44 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=6762E5C3A8755BA7DE9692D50C93F376; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 26 Sep 2022 11:47:44 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9zdGFuZGFyZC82MDgwNS5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImZyIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL2ZyL3N0YW5kYXJkLzYwODA1Lmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9jb25zZW50LzA5NjQ0OTNhLWIzOTYtNDY4NS05MTUwLTE4Zjc0OWFiZmJmYi9PdEF1dG9CbG9jay5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjA5NjQ0OTNhLWIzOTYtNDY4NS05MTUwLTE4Zjc0OWFiZmJmYiIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgdmFsdWUgPSAiOyAiICsgZG9jdW1lbnQuY29va2llOwogICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwp9CgpmdW5jdGlvbiBPcHRhbm9uV3JhcHBlcigpIHsKICAgIGNvbnNvbGUubG9nKCJPcHRhbm9uV3JhcHBlciBjYWxsZWQiKTsKCiAgICB2YXIgT0FCQ2Nvb2tpZU5hbWUgPSAiT3B0YW5vbkFsZXJ0Qm94Q2xvc2VkIjsKICAgIHZhciBiYW5uZXJBY2NlcHRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgib25ldHJ1c3QtYWNjZXB0LWJ0bi1oYW5kbGVyIik7CiAgICB2YXIgcGNBbGxvd0FsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2NlcHQtcmVjb21tZW5kZWQtYnRuLWhhbmRsZXIiKTsKICAgIHZhciBwY1NhdmVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJzYXZlLXByZWZlcmVuY2UtYnRuLWhhbmRsZXIgb25ldHJ1c3QtY2xvc2UtYnRuLWhhbmRsZXIgYnV0dG9uLXRoZW1lIilbMF07CiAgICB2YXIgT0FCQ2Nvb2tpZSA9IGdldENvb2tpZShPQUJDY29va2llTmFtZSk7CgogICAgLy8gSUYgbG9naWMgbmVlZGVkIGhlcmUgYmVjYXVzZSBvdC1iYW5uZXItc2RrIERJViBpcyBub3QgaW5qZWN0ZWQgb24gcGFnZSBsb2FkcyBpZiBiYW5uZXIgaXMgbm90IGV4cG9zZWQKCiAgICBpZiAoIU9BQkNjb29raWUgJiYgYmFubmVyQWNjZXB0QnRuKSB7CiAgICAgICAgYmFubmVyQWNjZXB0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgIH0pOwogICAgfQogICAgaWYgKHBjQWxsb3dBbGxCdG4pCiAgICAgICAgcGNBbGxvd0FsbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9KTsKCiAgICBwY1NhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0pOwp9Cjwvc2NyaXB0Pgo8IS0tIE9uZVRydXN0IENvb2tpZXMgQ29uc2VudCBOb3RpY2UgZW5kIGZvciB3d3cuaXNvLm9yZyAtLT4KCjwhLS0gSG90amFyIFRyYWNraW5nIENvZGUgZm9yIHd3dy5pc28ub3JnIC0tPgo8c2NyaXB0IHR5cGU9InRleHQvcGxhaW4iIGNsYXNzPSJvcHRhbm9uLWNhdGVnb3J5LUMwMDAzIj4KICAgIChmdW5jdGlvbihoLG8sdCxqLGEscil7CiAgICAgICAgaC5oaj1oLmhqfHxmdW5jdGlvbigpeyhoLmhqLnE9aC5oai5xfHxbXSkucHVzaChhcmd1bWVudHMpfTsKICAgICAgICBoLl9oalNldHRpbmdzPXtoamlkOjI1MTA4MDUsaGpzdjo2fTsKICAgICAgICBhPW8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTsKICAgICAgICByPW8uY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7ci5hc3luYz0xOwogICAgICAgIHIuc3JjPXQraC5faGpTZXR0aW5ncy5oamlkK2oraC5faGpTZXR0aW5ncy5oanN2OwogICAgICAgIGEuYXBwZW5kQ2hpbGQocik7CiAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ2h0dHBzOi8vc3RhdGljLmhvdGphci5jb20vYy9ob3RqYXItJywnLmpzP3N2PScpOwo8L3NjcmlwdD48IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgICAgPHNjcmlwdD4oZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6CiAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgICAgaj1kLmNyZWF0ZUVsZW1lbnQocyksZGw9bCE9J2RhdGFMYXllcic/JyZsPScrbDonJztqLmFzeW5jPXRydWU7ai5zcmM9CiAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1URkdLUVFCJyk7PC9zY3JpcHQ+CiAgICAgIDwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPHRpdGxlPklTTyAtIElTTyA4MDAwLTg6MjAxNSAtIERhdGEgcXVhbGl0eSDigJQgUGFydCA4OiBJbmZvcm1hdGlvbiBhbmQgZGF0YSBxdWFsaXR5OiBDb25jZXB0cyBhbmQgbWVhc3VyaW5nPC90aXRsZT4KCiAgICA8IS0tCiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9InNjcmlwdCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC80LjAuMTcvamF2YXNjcmlwdC93b29kLmZ1bGwubWluLmpzIiAvPgogICAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJzdHlsZSIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC80LjAuMTcvY3NzL3dvb2QuZnVsbC5taW4uY3NzIiAvPgogICAgICAtLT4KCiAgICAKPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvc3RhbmRhcmQvNjA4MDUuaHRtbCIgLz4KCiAgICA8IS0tIHN0YXJ0IGZhdmljb25zIC0tPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy9pbWcvaXNvL2Zhdmljb24vcmVkL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi1wcmVjb21wb3NlZC5wbmciPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy9pbWcvaXNvL2Zhdmljb24vcmVkL2Zhdmljb24uaWNvIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjZWVlIj4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy9pbWcvaXNvL2Zhdmljb24vcmVkL21zdGlsZS0xNDR4MTQ0LnBuZyI+CiAgICA8IS0tIGVuZCBmYXZpY29ucyAtLT4KCiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzMzMyI+CgogIAo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGlkPSJqYWhpYS1kYXRhLWN0eCI+eyJjb250ZXh0UGF0aCI6IiIsImxhbmciOiJlbiIsInVpbGFuZyI6ImVuIiwic2l0ZVV1aWQiOiI0MzkxNDZmOC02NzdlLTRkZGUtYjZjNi1iNjkyYjc1MzRmNTIiLCJ3Y2FnIjpmYWxzZSwiY2tlQ2ZnIjoiIn08L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIiBpZD0iamFoaWEtZGF0YS1jayI+eyJwYXRoIjoiL21vZHVsZXMvY2tlZGl0b3IvamF2YXNjcmlwdC8iLCJsbmciOiJlbl9VUyJ9PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvamF2YXNjcmlwdC9pbml0SmFoaWFDb250ZXh0LmpzIj48L3NjcmlwdD4KPGxpbmsgaWQ9InN0YXRpY0Fzc2V0Q1NTMCIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy93b29kLmZ1bGwubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KPGxpbmsgaWQ9InN0YXRpY0Fzc2V0Q1NTMSIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvY3NzL2NhdGFsb2d1ZS5jc3M/MTY2MzE2MzI3ODg5NSIgbWVkaWE9InNjcmVlbiIgdHlwZT0idGV4dC9jc3MiLz4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MCIgc3JjPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy93b29kLmZ1bGwubWluLmpzIiAgPjwvc2NyaXB0Pgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQxIiBzcmM9Ii9tb2R1bGVzL2lzby1qYWhpYS1zZXJ2aWNlLW1vZHVsZS9qYXZhc2NyaXB0L2NhdGFsb2d1ZS5qcz8xNjYzMTYzMjc4ODk1IiAgPjwvc2NyaXB0Pgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQyIiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9qYXZhc2NyaXB0L2N1c3RvbS5qcz8xNjYzMTYzNTc1MjI2IiAgPjwvc2NyaXB0Pgo8bWV0YSBuYW1lPSJjYXRlZ29yeSIgY29udGVudD0icCIgLz4KICA8bWV0YSBuYW1lPSJwdWJkYXRlIiBjb250ZW50PSIyMDIyMDgxNiIgLz4KICAKPCEtLSBUd2l0dGVyIENhcmQgZGF0YSAtLT4KICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9IkBpc29zdGFuZGFyZHMiIC8+CgogIDwhLS0gT3BlbiBHcmFwaCBkYXRhIC0tPgogIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklTTyIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5pc28ub3JnL2Ntcy9yZW5kZXIvbGl2ZS9lbi9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi8wOC82MDgwNS5odG1sIiAvPgogIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIiAvPgogIDwhLS0gVGh1bWJuYWlsIGltYWdlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0aHVtYm5haWwiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvNC4wLjE3L2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC80LjAuMTcvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvNC4wLjE3L2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmFsdCIgY29udGVudD0iSVNPIGxvZ28iIC8+CiAgPCEtLSBUaXRsZSAoZm9yIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iSVNPIDgwMDAtODoyMDE1IiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJJU08gODAwMC04OjIwMTUiIC8+CiAgPCEtLSBEZXNjcmlwdGlvbiAoZm9yIGdvb2dsZSwgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRlc2NyaXB0aW9uIiBjb250ZW50PSJEYXRhIHF1YWxpdHkg4oCUIFBhcnQgODogSW5mb3JtYXRpb24gYW5kIGRhdGEgcXVhbGl0eTogQ29uY2VwdHMgYW5kIG1lYXN1cmluZyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDg6IEluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHk6IENvbmNlcHRzIGFuZCBtZWFzdXJpbmciIC8+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDg6IEluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHk6IENvbmNlcHRzIGFuZCBtZWFzdXJpbmciIC8+CiAgPCEtLSBGYWNlYm9vayBhZG1pbnMgOiBMaW9uZWwsTWFyaWEgLS0+CiAgPG1ldGEgcHJvcGVydHk9ImZiOmFkbWlucyIgY29udGVudD0iMTAwMDAxMTE2MDc5Njc2LDEwMDAwMTQ0MDAwMzMwNSIgLz4KCiAgCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9Dc3JmU2VydmxldCI+PC9zY3JpcHQ+CjwvaGVhZD4KICA8Ym9keSBjbGFzcz0idGhlbWUtcmVkIiBpZD0icGFnZS10b3AiPgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgICAgPG5vc2NyaXB0IGFyaWEtaGlkZGVuPSJ0cnVlIj48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tVEZHS1FRQiIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+CiAgICA8YSBjbGFzcz0ic2tpcC1uYXZpZ2F0aW9uIGJ0biBidG4taW5mbyB2aXN1YWxseS1oaWRkZW4gdmlzdWFsbHktaGlkZGVuLWZvY3VzYWJsZSIgaHJlZj0iI2NvbnRlbnQiPlNraXAgdG8gbWFpbiBjb250ZW50PC9hPgoKICAgIDwhLS0gVG9wYmFyIHV0aWxpdHkgLS0+CiAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlV0aWxpdHkgTmF2aWdhdGlvbiIgY2xhc3M9Im5hdi11dGlsaXR5IG5hdmJhci1leHBhbmQtbGcgdGV4dC1zbSBuYXZiYXItZGFyayBiZy1kYXJrIHRleHQtbGlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDx1bCBjbGFzcz0ibmF2IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBqdXN0aWZ5LWNvbnRlbnQtc20tYXJvdW5kIGp1c3RpZnktY29udGVudC1tZC1lbmQiIGlkPSJ1dGlsaXRpZXMiPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbG9naW4uaXNvLm9yZyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJJU08ncyBhcHBsaWNhdGlvbnMgcG9ydGFsIj48aSBjbGFzcz0iYmktZ3JpZC0zeDMtZ2FwLWZpbGwiPjwvaT4mbmJzcDtBcHBsaWNhdGlvbnM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2VuLyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJPbmxpbmUgQnJvd3NpbmcgUGxhdGZvcm0iPjxpIGNsYXNzPSJiaS1qb3VybmFsLXRleHQiPjwvaT4mbmJzcDtPQlA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biIgaWQ9Imxhbmctc3dpdGNoZXIiPgogIDxhIGlkPSJsYW5nLWRyb3Bkb3duIiBjbGFzcz0ibmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIGhyZWY9IiMiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj5FbmdsaXNoPC9hPgogIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWVuZCIgcm9sZT0ibWVudSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5nLWRyb3Bkb3duIj4KICAgIDxsaT48YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgaHJlZj0iL2ZyL3N0YW5kYXJkLzYwODA1Lmh0bWwiPmZyYW7Dp2FpczwvYT48L2xpPjxsaT48YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgaHJlZj0iL3J1L3N0YW5kYXJkLzYwODA1Lmh0bWwiPtGA0YPRgdGB0LrQuNC5PC9hPjwvbGk+PC91bD4KPC9saT48L3VsPgogICAgICA8L2Rpdj4KICAgIDwvbmF2PgoKICAgIDwhLS0gSGVhZGVyIElTTy5PUkcgLS0+CiAgICA8aGVhZGVyIGNsYXNzPSJoZWFkZXItYm9vdHN0cmFwIHN0aWNreS10b3AiPgogICAgICA8IS0tIE1haW4gbmF2aWdhdGlvbiAtLT4KICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdi1pc28gbmF2YmFyLWV4cGFuZC1tZCBuYXZiYXItbGlnaHQgYmctbGlnaHRncmF5IHRleHQtZGFyayBzaGFkb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBsb2dvLXNxdWFyZSBpc29sb2dvIGxvZ28tc20iIGhyZWY9Ii9ob21lLmh0bWwiIHRpdGxlPSJJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIiBhbHQ9IklTTyBsb2dvIj48L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC80LjAuMTcvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIGFsdD0iSVNPIGxvZ28gZm9yIHByaW50Ii8+PC9kaXY+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWxpZ2h0IG5hdmJhci10b2dnbGVyIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1icy10YXJnZXQ9IiNtYWluTmF2IiBhcmlhLWNvbnRyb2xzPSJtYWluTmF2IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PC9kaXY+PHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbi14cyI+Jm5ic3A7TWVudTwvc3Bhbj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPCEtLSBUT1AgTEVWRUwxIE5BVklHQVRJT04gLS0+CiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9Ik1haW4gTmF2aWdhdGlvbiIgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSAiIGlkPSJtYWluTmF2Ij48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdmJhci1uYXYgbWUtYXV0byBtYi1sZy0wIG5hdi1sZXZlbDEgIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5hdi1pdGVtIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0YW5kYXJkcy5odG1sIj5TdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5hdi1pdGVtIG5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYWJvdXQtdXMuaHRtbCI+QWJvdXQgdXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5hdi1pdGVtIG5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIj5OZXdzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJuYXYtaXRlbSBub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiPlRha2luZyBwYXJ0PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJuYXYtaXRlbSBub0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9uYXY+PGZvcm0gY2xhc3M9Im5hdmJhci1mb3JtIGQtZmxleCBpc29zZWFyY2ggbXMtc20tMiIgcm9sZT0ic2VhcmNoIiBpZD0ic2l0ZVNlYXJjaCI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4iIGRhdGEtdXJsYmFzZT0iL2Ntcy9yZW5kZXIvbGl2ZS9lbiI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2VwYXRoPSIvc2l0ZXMvaXNvb3JnL3NlYXJjaCI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlNlYXJjaCIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij48aSBjbGFzcz0iYmktc2VhcmNoIj48L2k+PHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VhcmNoPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgIDxhIHJvbGU9ImJ1dHRvbiIgaWQ9InNob3BwaW5nQ2FydCIgY2xhc3M9ImJ0biBidG4tbGlnaHQgc2hvcHBpbmctY2FydC1saW5rIHNoYWRvdyIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWVuIiB0aXRsZT0iU2hvcHBpbmcgY2FydCIgYXJpYS1sYWJlbD0iU2hvcHBpbmcgY2FydCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iYmktY2FydCI+PC9pPiZuYnNwOzxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4teHMiPkNhcnQ8L3NwYW4+CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgoKICAgIDwvaGVhZGVyPgoKICAgIDwhLS0gTUFJTiBDT05URU5UIC0tPgogICAgPG1haW4gcm9sZT0ibWFpbiIgaWQ9ImNvbnRlbnQiIGNsYXNzPSJhY2VyIiBhcmlhLWxhYmVsPSJDb250ZW50IiB0YWJpbmRleD0iLTEiPgogICAgICAKCgoKPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaWQ9ImluZGV4UmVmZXJlbmNlIiBkYXRhLWluZGV4PSI2MDgwNSAtIElTTyA4MDAwLTg6MjAxNSAtIERhdGEgcXVhbGl0eSDigJQgUGFydCA4OiBJbmZvcm1hdGlvbiBhbmQgZGF0YSBxdWFsaXR5OiBDb25jZXB0cyBhbmQgbWVhc3VyaW5nIj48L3NwYW4+CjxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGlkPSJpdGVtUmVmZXJlbmNlIj5JU08gODAwMC04OjIwMTU8L3NwYW4+CjxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJzZWN0aW9uLW5hdmlnYXRpb24iPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImNhdGVnb3J5Ij5wPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpdGVtcHJvcD0ibmFtZSIgaWQ9ImRvY1JlZiI+SVNPIDgwMDAtODoyMDE1PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpdGVtcHJvcD0icHJvZHVjdElEIiBpZD0iY3NOdW1iZXIiPjYwODA1PC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImJyYW5kIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Pcmdhbml6YXRpb24iPgogICAgICAgICAgPGRpdiBpdGVtcHJvcD0ibG9nbyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvSW1hZ2VPYmplY3QiPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzQuMC4xNy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIvPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjI4MyI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJoZWlnaHQiIGNvbnRlbnQ9IjI2MSI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJJU08gLSBJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJDaGlsZHJlbiBOYXZpZ2F0aW9uIiBjbGFzcz0iaGVhZGluZy1jb25kZW5zZWQgbmF2LXJlbGF0aXZlcyI+CgogIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCBzZWN0aW9uLWgxIHNlY3Rpb24tYmFjayI+PHNwYW4gY2xhc3M9Imljb24gIj48L3NwYW4+PGEgdGFyZ2V0PSIiIGhyZWY9Ii9zdGFuZGFyZHMtY2F0YWxvZ3VlL2Jyb3dzZS1ieS1pY3MuaHRtbCJ0aXRsZT0iQnJvd3NlIHRoZSBmdWxsIGNvbGxlY3Rpb24gb2YgSVNPIHN0YW5kYXJkcyBhbmQgZmluZCB0aGUgb25lcyB0aGF0IGFwcGx5IHRvIHlvdXIgc2VjdG9yLiI+SUNTPC9hPjxhIGhyZWY9Ii9lbi9pY3MvMDEuaHRtbCI+MDE8L2E+PGEgaHJlZj0iL2VuL2ljcy8wMS4wNDAuaHRtbCI+MDEuMDQwPC9hPjxhIGhyZWY9Ii9lbi9pY3MvMDEuMDQwLjI1Lmh0bWwiPjAxLjA0MC4yNTwvYT48L2Rpdj4KICA8aDE+SVNPIDgwMDAtODoyMDE1PC9oMT4KICA8aDIgY2xhc3M9Im10LTAgIj5EYXRhIHF1YWxpdHkg4oCUIFBhcnQgODogSW5mb3JtYXRpb24gYW5kIGRhdGEgcXVhbGl0eTogQ29uY2VwdHMgYW5kIG1lYXN1cmluZzwvaDI+PC9uYXY+PC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgoKPHNlY3Rpb24gY2xhc3M9ImJnLWxpZ2h0Z3JheSBzZWN0aW9uLXNtIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTcgcHQtMCI+CiAgICAgICAgICAgIDxkaXYgcm9sZT0iYWxlcnQiIGNsYXNzPSJoNCBtYi0wIj4KICAgICAgICAgICAgICBUaGlzIHN0YW5kYXJkIHdhcyBsYXN0IHJldmlld2VkIGFuZCBjb25maXJtZWQgaW4mbmJzcDsyMDIyLgogICAgICAgICAgICAgIFRoZXJlZm9yZSB0aGlzIHZlcnNpb24gcmVtYWlucyBjdXJyZW50LjwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogIDxzZWN0aW9uIGlkPSJwcm9kdWN0LWRldGFpbHMiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgPGgzIGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIj5BYnN0cmFjdCZuYnNwOzxhIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBmbG9hdC1lbmQiIGlkPSJvYnAtcHJldmlldyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpLyMhaXNvOnN0ZDo2MDgwNTplbiI+PGkgY2xhc3M9ImJpLWpvdXJuYWwtdGV4dCI+PC9pPiZuYnNwO1ByZXZpZXc8L2E+PC9oMz4KICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgPHA+PHA+SVNPIDgwMDAtODoyMDE1IGRlc2NyaWJlcyBmdW5kYW1lbnRhbCBjb25jZXB0cyBvZiBpbmZvcm1hdGlvbiBhbmQgZGF0YSBxdWFsaXR5LCBhbmQgaG93IHRoZXNlIGNvbmNlcHRzIGFwcGx5IHRvIHF1YWxpdHkgbWFuYWdlbWVudCBwcm9jZXNzZXMgYW5kIHF1YWxpdHkgbWFuYWdlbWVudCBzeXN0ZW1zLjwvcD4KPHA+SXQgYWxzbyBzcGVjaWZpZXMgcHJlcmVxdWlzaXRlcyBmb3IgbWVhc3VyaW5nIGluZm9ybWF0aW9uIGFuZCBkYXRhIHF1YWxpdHkgd2hlbiBleGVjdXRlZCB3aXRoaW4gcXVhbGl0eSBtYW5hZ2VtZW50IHByb2Nlc3NlcyBhbmQgcXVhbGl0eSBtYW5hZ2VtZW50IHN5c3RlbXMuPC9wPjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGJyLz4KICAgICAgICA8aDM+CiAgR2VuZXJhbCBpbmZvcm1hdGlvbjxzdXA+Jm5ic3A7PGEgaHJlZj0iL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvMDgvNjA4MDUuZGV0YWlsLnJzcyIgY2xhc3M9ImJpLXJzcy1maWxsIHRleHQtd2FybmluZyBmcy02IiBkYXRhLWJzLXRvZ2dsZT0iaXNvLXRvb2x0aXAiIGRhdGEtb3JpZ2luYWwtdGl0bGU9IlN1YnNjcmliZSZuYnNwO3RvJm5ic3A7dXBkYXRlcyI+PC9hPjwvc3VwPgogIDwvaDM+Cjx1bCBjbGFzcz0icmVmaW5lIj4KICA8bGk+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlN0YXR1czwvZGl2PiZuYnNwOzombmJzcDs8c3Bhbj48aSBjbGFzcz0iYmktY2hlY2stY2lyY2xlIiB0aXRsZT0iUHVibGlzaGVkIj48L2k+Jm5ic3A7UHVibGlzaGVkPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlB1YmxpY2F0aW9uIGRhdGU8L2Rpdj4mbmJzcDs6Jm5ic3A7PHNwYW4gaXRlbXByb3A9InJlbGVhc2VEYXRlIj4yMDE1LTExPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9saT4KICA8bGk+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPkVkaXRpb248L2Rpdj4mbmJzcDs6Jm5ic3A7MTwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPk51bWJlciBvZiBwYWdlczwvZGl2PiZuYnNwOzombmJzcDsxNTwvZGl2PgogICAgPC9kaXY+CiAgPC9saT4KICA8bGk+CiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+VGVjaG5pY2FsIENvbW1pdHRlZTwvZGl2PiZuYnNwOzoKICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICA8YSBocmVmPSIvY29tbWl0dGVlLzU0MTU4Lmh0bWwiPklTTy9UQyAxODQvU0MgNDwvYT48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5JbmR1c3RyaWFsIGRhdGE8L3NwYW4+CiAgICAgIDwvZGl2PgogICAgPC9saT4KICA8bGk+CiAgICA8ZGwgY2xhc3M9ImRsLWlubGluZSBuby1ib3R0b20tbWFyZ2luIj4KICAgICAgPGR0IGNsYXNzPSJlbnRyeS1sYWJlbCBlbnRyeS1ibG9jayI+PHN0cm9uZz5JQ1M8L3N0cm9uZz48L2R0PiZuYnNwOzoKICAgICAgPGRkPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LW5hbWUgZW50cnktYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSIvaWNzLzAxLjA0MC4yNS5odG1sIj4KICAgICAgICAgICAgICAgIDAxLjA0MC4yNTwvYT4KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbnRyeS10aXRsZSI+TWFudWZhY3R1cmluZyBlbmdpbmVlcmluZyAoVm9jYWJ1bGFyaWVzKTwvc3Bhbj4KICAgICAgICA8L2RkPgogICAgICA8ZGQ+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9pY3MvMjUuMDQwLjQwLmh0bWwiPgogICAgICAgICAgICAgICAgMjUuMDQwLjQwPC9hPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5JbmR1c3RyaWFsIHByb2Nlc3MgbWVhc3VyZW1lbnQgYW5kIGNvbnRyb2w8L3NwYW4+CiAgICAgICAgPC9kZD4KICAgICAgPC9kbD4KICA8L2xpPgo8L3VsPgo8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1tZC1vZmZzZXQtMSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzdG9yZS1ib3ggcHJvZHVjdC1ib3ggc2hhZG93IiBpZD0ic3RvcmUtYm94Ij4KICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgIDxoMyBjbGFzcz0idGV4dC1jZW50ZXIiPkJ1eSB0aGlzIHN0YW5kYXJkPC9oMz4KICAgICAgPGRpdiBjbGFzcz0iZml0LXRvLWJveCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlLXBhdGggdmlzdWFsbHktaGlkZGVuIj5lbjwvc3Bhbj4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIG9yZGVyUHJvZHVjdCBhbGlnbi1taWRkbGUiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1YWdlPC90aD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgPHRyIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIHZpc3VhbGx5LWhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgdmlzdWFsbHktaGlkZGVuIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIHZpc3VhbGx5LWhpZGRlbiI+ODg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0IGFjdGl2ZSI+PGkgY2xhc3M9ImJpIGJpLWNoZWNrLWxnIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGlkPSJia2lmbXRfMSI+CiAgICAgICAgICAgICAgICBQREY8L3RkPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ib3JkZXJMYW5ndWFnZSI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJia2lfMSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5ndWFnZSIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMHJEdkI4QUFLfmEwNWIwMDAwMDA1V1YyWkFBV35hMGZiMDAwMDAwM1YyZnJBQUN+YTBjYjAwMDAwMDRsbzB4QUFBIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR5cGUgdmlzdWFsbHktaGlkZGVuIj5zdGQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnRlciB2aXN1YWxseS1oaWRkZW4iPjI8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgdmlzdWFsbHktaGlkZGVuIj44ODwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9vc2VGb3JtYXQiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyB2aXN1YWxseS1oaWRkZW4iPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIj4KICAgICAgICAgICAgICAgIFBhcGVyPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzIiIGRpc2FibGVkIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDByRHZCOEFBS35hMDViMDAwMDAwNVdWMmVBQUd+YTBmYjAwMDAwMDNWMmZDQUFTfmEwY2IwMDAwMDA0bG8wSUFBUSIgbGFuZz0iZW4iIHNlbGVjdGVkPgogICAgICAgICAgICAgICAgICAgICAgRW5nbGlzaDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90Ym9keT4KICAgICAgICA8L3RhYmxlPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZzotMS9zdGFuZGFyZC82MDgwNS5odG1sIiAvPgogICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiIGNvbnRlbnQ9Imh0dHBzOi8vc2NoZW1hLm9yZy9JblN0b2NrIiAvPgogICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgb3JkZXJCYXNrZXQiIGlkPSJia2lhbmNob3JfMSI+CiAgICAgICAgICA8bGkgY2xhc3M9InByaWNlIG9yZGVyIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImN1cnJlbmN5IiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+Q0hGPC9zcGFuPjxzcGFuIGNsYXNzPSJhbW91bnQiIGlkPSJwcm9kdWN0UHJpY2UiIGl0ZW1wcm9wPSJwcmljZSI+ODg8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIiBpZD0ic3RhbmRhcmQtYnV5IiBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIGRhdGEtYnMtdGFyZ2V0PSIjaXNvLW9wdG91dCIgb25jbGljaz0iamF2YXNjcmlwdDphZGRUb0Jhc2tldCgnMScsICdlbicsICdzdGQnKSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImJpLWNhcnQiPjwvaT4mbmJzcDtCdXk8L2J1dHRvbj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPCEtLSBTVEFSVCBPRiBNT0RBTCAoQnV5IElTTy5PUkcgd2l0aCBPUFRPVVQpIC0tPgogIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBpZD0iaXNvLW9wdG91dCIgYXJpYS1oaWRkZW49InRydWUiIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxMYWJlbCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJtb2RhbExhYmVsIj5CdXkmbmJzcDt0aGlzIHN0YW5kYXJkPC9oND4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJDaGVja291dCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iY29udGludWVTaG9wcGluZyIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgZGF0YS1sYWJlbD0iQ29udGludWUgc2hvcHBpbmciPjwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwhLS0gRU5EIE9GIE1PREFMIC0tPgo8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2VjdGlvbiBpZD0ibGlmZWN5Y2xlIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICA8aDM+TGlmZSBjeWNsZTwvaDM+CiAgICAgICAgPGJyLz4KICAgICAgICA8ZGl2IGNsYXNzPSJsaWZlY3ljbGUiPgogICAgICAgICAgPHVsIGNsYXNzPSJzdGVwcyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGltZS1zdGVwIj4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtaGVscCI+Tm93PC9oND4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGlzaGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PklTTyA4MDAwLTg6MjAxNTwvaDU+CiAgICAgICAgICAgICAgICAgIDxici8+QSBzdGFuZGFyZCBpcyByZXZpZXdlZCBldmVyeSA1IHllYXJzPGJyLz48YSBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGhyZWY9IiNzdGFnZXMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgY3VycmVudC1zdGFnZSB0ZXh0LXNtIGNvbGxhcHNlZCI+U3RhZ2U6IDxzdHJvbmc+OTAuOTM8L3N0cm9uZz4gKENvbmZpcm1lZCk8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDx1bCBjbGFzcz0ic3RhZ2VzIGNvbGxhcHNlIiBpZD0ic3RhZ2VzIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiAgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByZWxpbWluYXJ5PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDExLTEwLTI4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3IHByb2plY3QgYXBwcm92ZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QcmVwYXJhdG9yeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+Q29tbWl0dGVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTMtMDMtMjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDEzLTAzLTIyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkvYmFsbG90IGluaXRpYXRlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxMy0wNS0yNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHZvdGluZy8gY29tbWVudCBwZXJpb2Q8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTMtMDUtMjg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCBhcHByb3ZlZCBmb3IgcmVnaXN0cmF0aW9uIGFzIERJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+RW5xdWlyeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE0LTAzLTE3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIHJlZ2lzdGVyZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMDUtMTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBESVMgYmFsbG90IGluaXRpYXRlZDogMTIgd2Vla3M8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMDgtMjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiB2b3Rpbmc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMDktMDk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdWxsIHJlcG9ydCBjaXJjdWxhdGVkOiBESVMgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBGRElTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5BcHByb3ZhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE1LTA3LTI3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmluYWwgdGV4dCByZWNlaXZlZCBvciBGRElTIHJlZ2lzdGVyZWQgZm9yIGZvcm1hbCBhcHByb3ZhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNS0wOS0xMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb29mIHNlbnQgdG8gc2VjcmV0YXJpYXQgb3IgRkRJUyBiYWxsb3QgaW5pdGlhdGVkOiA4IHdlZWtzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE1LTA5LTI4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nLiBQcm9vZiByZXR1cm5lZCBieSBzZWNyZXRhcmlhdDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtc3VjY2VzcyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzYwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNS0wOS0yODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgcHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTUtMTEtMTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHB1Ymxpc2hlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYmctc3VjY2VzcyBhY3RpdmUiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIwLTEwLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCB1bmRlciBzeXN0ZW1hdGljIHJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wMy0wNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIyLTA4LTE2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBjb25maXJtZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSAgY2xhc3M9J2xpc3Qtc2VwYXJhdGlvbic+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHByb3Bvc2VkIGJ5IFRDIG9yIFNDPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1tdXRlZCI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+V2l0aGRyYXdhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTVfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTUuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaXRoZHJhd2FsIG9mIEludGVybmF0aW9uYWwgU3RhbmRhcmQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0iYmctbGlnaHRncmF5IiBpZD0iY29udGFjdCI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8aDQ+R290IGEgcXVlc3Rpb24/PC9oND4KCjxwPkNoZWNrIG91dCBvdXIgPGEgaHJlZj0iL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCIgdGl0bGU9IkZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIChGQVFzKSI+RkFRczwvYT48L3A+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ2Y2FyZCBjb250YWN0IG5vLWZpZ3VyZSBjbGVhcmZpeCIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QZXJzb24iPgo8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBuby1pbWFnZSI+CjxkaXYgY2xhc3M9ImZuIG4iPjxzcGFuIGNsYXNzPSJnaXZlbi1uYW1lIiBpdGVtcHJvcD0iZ2l2ZW5OYW1lIj5DdXN0b21lciBjYXJlPC9zcGFuPjwvZGl2PgoKPGRpdiBjbGFzcz0idGVsIiBpdGVtcHJvcD0idGVsZXBob25lIj4rNDEgMjIgNzQ5IDA4IDg4PC9kaXY+Cgo8ZGl2IGNsYXNzPSJlbWFpbCIgaXRlbXByb3A9ImVtYWlsIj48YSBocmVmPSJtYWlsdG86Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmciPmN1c3RvbWVyc2VydmljZUBpc28ub3JnPC9hPjwvZGl2PgoKPGhyIC8+CjxkaXYgY2xhc3M9Im5vdGUiPgo8cCBjbGFzcz0ic21hbGwiPk9wZW5pbmcgaG91cnM6PGJyIC8+Ck1vbmRheSB0byBGcmlkYXkgLSAwOTowMC0xMjowMCwgMTQ6MDAtMTc6MDAgKFVUQysxKTwvcD4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9IndlbGwgdGV4dC1jZW50ZXIgY2xlYXJmaXgiPgogIDxoND5LZWVwIHVwIHRvIGRhdGUgd2l0aCBJU088L2g0PgoKPHA+U2lnbiB1cCB0byBvdXIgbmV3c2xldHRlciBmb3IgdGhlIGxhdGVzdCBuZXdzLCB2aWV3cyBhbmQgcHJvZHVjdCBpbmZvcm1hdGlvbi48L3A+PGRpdj48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWZhbmN5Ym94PSIiIGRhdGEtdHlwZT0iaWZyYW1lIiBocmVmPSJodHRwczovL2NvbmZpcm1zdWJzY3JpcHRpb24uY29tL2gvZC8zNDEyREE3OTkzQUMzQjdDIj5TdWJzY3JpYmU8L2E+PC9kaXY+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+LmZhbmN5Ym94LXNsaWRlLS1pZnJhbWUgLmZhbmN5Ym94LWNvbnRlbnQgewogd2lkdGggIDogNTAwcHg7CiBoZWlnaHQgOiA2MDBweDsKIG1heC13aWR0aCAgOiA4MCU7CiBtYXgtaGVpZ2h0IDogODAlOwogbWFyZ2luOiAwOwp9Ci5mYW5jeWJveC1zbGlkZS0taWZyYW1lIC5mYW5jeWJveC1jb250ZW50IC5sLXBhZ2UtY29udGFpbmVyIHsKcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50Owp9Cjwvc3R5bGU+PC9kaXY+PC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPjxkaXYgY2xhc3M9Im5hdi1icmVhZGNydW1iIHByaW50LWZvb3RlciBiZy1ibGFjayI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCBzbWFsbCI+CiAgICAgICAgICAgICAgPCEtLSBCUkVBRENSVU1CIC0tPgogICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkhvbWUgcGFnZSI+PGkgY2xhc3M9ImJpLWhvdXNlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT48L2xpPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL3N0b3JlLmh0bWwiPlN0b3JlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPgo8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9lbi9pY3MvMDEuaHRtbCI+MDE8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzAxLjA0MC5odG1sIj4wMS4wNDA8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzAxLjA0MC4yNS5odG1sIj4wMS4wNDAuMjU8L2E+PC9saT48bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+SVNPIDgwMDAtODoyMDE1PC9saT48L29sPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBoaWRkZW4tcHJpbnQgdGV4dC1lbmQgc21hbGwgbXQtMyBtdC1zbS0wIj4KICAgICAgICAgICAgICA8YSByb2xlPSJidXR0b24iIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgdGV4dC13aGl0ZSBjb2xsYXBzZWQiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l0ZW1hcCI+U2l0ZW1hcDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBib3JkZXItdG9wIiBpZD0iY29sbGFwc2VTaXRlbWFwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICA8IS0tIFNJVEVNQVAgLS0+CiAgICAgICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJTaXRlbWFwIiBjbGFzcz0ic2l0ZW1hcC1mb290ZXIgY2xlYXJmaXggc21hbGwgIiBpZD0ibmF2LXNpdGVtYXAiPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0iIG5hdi1sZXZlbDEgbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiPlN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9IiBuYXYtbGV2ZWwyICBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2JlbmVmaXRzLW9mLXN0YW5kYXJkcy5odG1sIj5CZW5lZml0czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wb3B1bGFyLXN0YW5kYXJkcy5odG1sIj5Qb3B1bGFyIHN0YW5kYXJkczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCI+Q29tbWl0dGVlIGZvciBjb25mb3JtaXR5IGFzc2Vzc21lbnQgKENBU0NPKTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zZGdzLmh0bWwiPlNER3M8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2Fib3V0LXVzLmh0bWwiPkFib3V0IHVzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0iIG5hdi1sZXZlbDIgIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvd2hhdC13ZS1kby5odG1sIj5XaGF0IHdlIGRvPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cnVjdHVyZS5odG1sIj5TdHJ1Y3R1cmU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVtYmVycy5odG1sIj5NZW1iZXJzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0cmF0ZWd5MjAzMC5odG1sIj5TdHJhdGVneTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbmV3cy5odG1sIj5OZXdzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0iIG5hdi1sZXZlbDIgIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9ldmVudHMuaHRtbCI+RXZlbnRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL21lZGlhLWtpdC5odG1sIj5NZWRpYSBraXQ8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiPlRha2luZyBwYXJ0PC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0iIG5hdi1sZXZlbDIgIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sIj5XaG8gZGV2ZWxvcHMgc3RhbmRhcmRzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2RlbGl2ZXJhYmxlcy1hbGwuaHRtbCI+RGVsaXZlcmFibGVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2dldC1pbnZvbHZlZC5odG1sIj5HZXQgaW52b2x2ZWQ8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvQ2xpbWF0ZUFjdGlvbi5odG1sIj5DbGltYXRlIGFjdGlvbiBraXQ8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvcmVzb3VyY2VzLmh0bWwiPlJlc291cmNlczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gaW5QYXRoICBsYXN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdG9yZS5odG1sIj5TdG9yZTwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9IiBuYXYtbGV2ZWwyICBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gaW5QYXRoICBhY3RpdmUgZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIiAgY2xhc3M9Im5hdi1saW5rICI+U3RhbmRhcmRzIGNhdGFsb2d1ZTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wdWJsaWNhdGlvbi1saXN0Lmh0bWwiPlB1YmxpY2F0aW9ucyBhbmQgcHJvZHVjdHM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9uYXY+PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L21haW4+CiAgICA8Zm9vdGVyIHJvbGU9ImNvbnRlbnRpbmZvIiBhcmlhLWxhYmVsPSJGb290ZXIiIGNsYXNzPSJmb290ZXItaXNvIGZvb3Rlci1kYXJrIGJnLWRhcmtlcmdyYXkiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1saW5rcyBjZW50ZXItYmxvY2siPgogICAgICAgICAgPCEtLSBGT09URVIgTElOS1MgLS0+CiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IklubGluZSBOYXZpZ2F0aW9uIiBjbGFzcz0iIiBpZD0iIj48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Imxpc3QtaW5saW5lIGNsZWFyZml4ICBuYXYtbGV2ZWwxICI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9pc28tbmFtZS1hbmQtbG9nby5odG1sIj5JU08gbmFtZSBhbmQgbG9nbzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wcml2YWN5LWFuZC1jb3B5cmlnaHQuaHRtbCI+UHJpdmFjeSBhbmQgY29weXJpZ2h0PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2Nvb2tpZXMuaHRtbCI+Q29va2llIHBvbGljeTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93b3JraW5nLXdpdGgtaXNvLmh0bWwiICBjbGFzcz0ibmF2LWxpbmsgIj5Kb2JzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCI+RkFRczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jb250YWN0LWlzby5odG1sIj5Db250YWN0IElTTzwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L25hdj48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItc29jaWFsIGNsZWFyZml4Ij4KICAgICAgICAgIDx1bCBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Pcmdhbml6YXRpb24iPgogICAgICAgICAgICA8bGluayBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnLyI+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPjxpIGNsYXNzPSJiaS1saW5rZWRpbiI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+PGkgY2xhc3M9ImJpLXR3aXR0ZXIiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmFjZWJvb2siPjxpIGNsYXNzPSJiaS1mYWNlYm9vayI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvUGxhbmV0SVNPIiB0aXRsZT0iWW91VHViZSI+PGkgY2xhc3M9ImJpLXlvdXR1YmUiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9Ikluc3RhZ3JhbSI+PGkgY2xhc3M9ImJpLWluc3RhZ3JhbSI+PC9pPjwvYT48L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8cCBjbGFzcz0ibGVhZCI+R3JlYXQgdGhpbmdzIGhhcHBlbiB3aGVuIHRoZSB3b3JsZCBhZ3JlZXM8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiBwdWxsLWxlZnQiPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC14cyI+V2UgYXJlIGNvbW1pdHRlZCB0byBlbnN1cmluZyB0aGF0IG91ciB3ZWJzaXRlIGlzIGFjY2Vzc2libGUgdG8gZXZlcnlvbmUuIElmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3Igc3VnZ2VzdGlvbnMgcmVnYXJkaW5nIHRoZSBhY2Nlc3NpYmlsaXR5IG9mIHRoaXMgc2l0ZSwgcGxlYXNlIDxhIGhyZWY9Im1haWx0bzp3ZWJtYXN0ZXJAaXNvLm9yZz9zdWJqZWN0PUFjY2Vzc2liaWxpdHkiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogbm93cmFwIj5jb250YWN0IHVzPC9hPi48L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIEFsbCBSaWdodHMgUmVzZXJ2ZWQ8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+QWxsIElTTyBwdWJsaWNhdGlvbnMgYW5kIG1hdGVyaWFscyBhcmUgcHJvdGVjdGVkIGJ5IGNvcHlyaWdodCBhbmQgYXJlIHN1YmplY3QgdG8gdGhlIHVzZXLigJlzIGFjY2VwdGFuY2Ugb2YgSVNP4oCZcyBjb25kaXRpb25zIG9mIGNvcHlyaWdodC4gQW55IHVzZSwgaW5jbHVkaW5nIHJlcHJvZHVjdGlvbiByZXF1aXJlcyBvdXIgd3JpdHRlbiBwZXJtaXNzaW9uLiBBbGwgY29weXJpZ2h0IHJlcXVlc3RzIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gPGEgaHJlZj0ibWFpbHRvOmNvcHlyaWdodEBpc28ub3JnIj5jb3B5cmlnaHRAaXNvLm9yZzwvYT4uPC9zcGFuPjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idG9wYmFyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXItY29udGVudCI+CiAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIGxvZ28teHMgdGhlbWUtcmVkIHBvd2VyZWRieSBwYWdlLXNjcm9sbCBsb2dvLXNjcm9sbFRvcCIgaHJlZj0iI3BhZ2UtdG9wIiB0aXRsZT0iU2Nyb2xsIHRvIHRvcCI+PC9hPgo8ZGl2IGNsYXNzPSJwb3dlcmVkYnktdHh0Ij5Qb3dlcmVkIGJ5PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJydWJiZXIiPjwvZGl2PgogICAgPC9mb290ZXI+CgogICAgCgo8L2JvZHk+CjwvaHRtbD4=
  recorded_at: Mon, 26 Sep 2022 11:47:45 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=D214274D2AAE70804644372C1BCE4AB1; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 26 Sep 2022 11:47:44 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:45 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 26 Sep 2022 11:47:45 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '8'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:46 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=695A28553D9EE99A3DCD3243C9E246DE; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 26 Sep 2022 11:47:50 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 26 Sep 2022 11:47:51 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=2BF0638D773C9FC2FF633CD518A3DDB7; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 26 Sep 2022 13:47:51 CAT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 26 Sep 2022 11:47:52 GMT
recorded_with: VCR 6.1.0
