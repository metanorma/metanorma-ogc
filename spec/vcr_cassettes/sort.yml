---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-165R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1744'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"74d5f7a517f5e61e185f7fa4f8aaca202142149690d169206274d0f1335129ae"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 20D8:1293D:1466765:153C25E:6468F395
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230105-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1684599705.533123,VS0,VE166
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - e7034b31f48529da10fd24f4191d407dc304168d
      Expires:
      - Sat, 20 May 2023 16:26:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.1
        id: 11-165r2
        title:
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=51908
          type: obp
        type: standard
        docid:
        - id: 11-165r2
          type: OGC
          primary: true
        date:
        - type: published
          value: '2013-01-03'
        contributor:
        - person:
            name:
              completename:
                content: 'Ben Domenico and Stefano Nativi '
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        edition:
          content: '2'
        revdate: '2013-01-03'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "The OGC netCDF encoding supports electronic encoding of geospatial data,
            that is, digital geospatial information representing space and time-varying phenomena.\r\nThis
            standard specifies the CF-netCDF data model extension. \r\nThis standard specifies
            the CF-netCDF data model mapping onto the ISO 19123 coverage schema. \r\nThis
            standard deals with multi-dimensional gridded data and multi-dimensional multi-point
            data.\r\nIn particular, this extension standard encoding profile is limited to
            multi-point, and regular and warped grids; however, irregular grids are important
            in the CF-netCDF community and work is underway to expand the CF-netCDF to encompass
            other coverages types, including irregular gridded datasets.\r\n"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Sat, 20 May 2023 16:21:44 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/17-080R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1346'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c4f72310b0dc880606dd69b194909729bdbe4b8fc7aa74d99fec1d07daab0ab8"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 638E:8945:31ED2DA:33CF9CD:6468F398
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230089-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1684599705.540543,VS0,VE166
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 49a9c84088f5a638648d60feaa36a494b0fbe49c
      Expires:
      - Sat, 20 May 2023 16:26:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjEKaWQ6IDE3LTA4MHIyCnRpdGxlOgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogdGl0bGUtbWFpbgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogbWFpbgpsaW5rOgotIGNvbnRlbnQ6IGh0dHBzOi8vZG9jcy5vZ2Mub3JnL2lzLzE3LTA4MHIyLzE3LTA4MHIyLmh0bWwKICB0eXBlOiBvYnAKdHlwZTogc3RhbmRhcmQKZG9jaWQ6Ci0gaWQ6IDE3LTA4MHIyCiAgdHlwZTogT0dDCiAgcHJpbWFyeTogdHJ1ZQpkYXRlOgotIHR5cGU6IHB1Ymxpc2hlZAogIHZhbHVlOiAnMjAxOC0wOS0yMCcKY29udHJpYnV0b3I6Ci0gcGVyc29uOgogICAgbmFtZToKICAgICAgY29tcGxldGVuYW1lOgogICAgICAgIGNvbnRlbnQ6IFJ5YW4gRnJhbnoKICByb2xlOgogIC0gdHlwZTogYXV0aG9yCi0gb3JnYW5pemF0aW9uOgogICAgbmFtZToKICAgIC0gY29udGVudDogT3BlbiBHZW9zcGF0aWFsIENvbnNvcnRpdW0KICByb2xlOgogIC0gdHlwZTogcHVibGlzaGVyCmVkaXRpb246CiAgY29udGVudDogJzInCnJldmRhdGU6ICcyMDE4LTA5LTIwJwpsYW5ndWFnZToKLSBlbgpzY3JpcHQ6Ci0gTGF0bgphYnN0cmFjdDoKLSBjb250ZW50OiAnVGhlIOKAnE11bHRpLVNwZWN0cmFsIEltYWdlcnnigJ0gZXh0ZW5zaW9uIGRlZmluZXMgaG93IHRvIGVuY29kZSBhbmQgc3RvcmUKICAgIHJlZmxlY3RlZCBlbGVjdHJvbWFnbmV0aWMgcmFkaWF0aW9uIGZyb20gdGhlIGluZnJhcmVkIHdhdmVsZW5ndGhzIGludG8gYSBDREIuICBUaGUKICAgIHBvcnRpb24gb2YgdGhlIHNwZWN0cnVtIHRhcmdldGVkIGlzIGJldHdlZW4gdGhlIHZpc2libGUgc3BlY3RydW0gKGN1cnJlbnQgaW1hZ2VyeQogICAgYW5kIHRleHR1cmUgaW4gQ0RCKSwgYW5kIGxvbmdlciB3YXZlbGVuZ3RoIGluZnJhcmVkIHRoYXQgaXMgcHJpbWFyaWx5IGVtaXNzaXZlCiAgICBhbmQgY2FuIGJlIHNpbXVsYXRlZCBiYXNlZCBvbiB0aGUgbWF0ZXJpYWwgdGVtcGVyYXR1cmUuICcKICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgpkb2N0eXBlOiBzdGFuZGFyZApzdWJkb2N0eXBlOiBpbXBsZW1lbnRhdGlvbgplZGl0b3JpYWxncm91cDoKICBjb21taXR0ZWU6IHRlY2huaWNhbApleHQ6CiAgc2NoZW1hLXZlcnNpb246IHYxLjAuMQo=
  recorded_at: Sat, 20 May 2023 16:21:44 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-157.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1561'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"d10bd37bf20c763cc29e8b7ffe3971e49776e47a82743cefa18f96b5a0584960"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 60B2:075F:2653AE8:27DEB92:6468F398
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230050-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1684599705.609524,VS0,VE160
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5ed31bdc8da20a4745e487361aa7074eba73825c
      Expires:
      - Sat, 20 May 2023 16:26:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.1
        id: 11-157
        title:
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-intro
        - content: Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0 - Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=46435
          type: obp
        type: standard
        docid:
        - id: 11-157
          type: OGC
          primary: true
        date:
        - type: published
          value: '2011-10-18'
        contributor:
        - person:
            name:
              completename:
                content: Jim Greenwood
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        revdate: '2011-10-18'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "This document being corrected specifies many of the aspects that are,
            or should be, common to all or multiple OWS interface Implementation Specifications.
            The Common Implementation Specification aspects specified by this document currently
            include:\r\na) Operation request and response contents, most partial\r\nb) Parameters
            and data structures included in operation requests and responses c) XML and KVP
            encoding of operation requests and responses"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Sat, 20 May 2023 16:21:44 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:44 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:44 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 20 May 2023 16:21:44 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi8zMC82MzA4NiIsInV1aWQiOiI5OTAwOTA0Mi00NGViLTQzY2UtODk2Ni02ODViMDBkMDVmZDciLCJ0aXRsZSI6IklTTyA4MDAwLTYxOjIwMTYgRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDYxOiBEYXRhIHF1YWxpdHkgbWFuYWdlbWVudDogUHJvY2VzcyByZWZlcmVuY2UgbW9kZWwiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gODAwMC02MToyMDE2IHNwZWNpZmllcyB0aGUgcHJvY2Vzc2VzIHJlcXVpcmVkIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudC4gVGhlIHByb2Nlc3NlcyBhcmUgdXNlZCBhcyBhIHJlZmVyZW5jZSB0byBlbmhhbmNlIGRhdGEgcXVhbGl0eSBhbmQgYXNzZXNzIHByb2Nlc3MgY2FwYWJpbGl0eSBvciBvcmdhbml6YXRpb25hbCBtYXR1cml0eSBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQuICIsIm9iamVjdElEIjoiNjMwODZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjgwMDAtNjE8L2VtPjoyMDE2IERhdGEgcXVhbGl0eSDigJQgUGFydCA2MTogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IFByb2Nlc3MgcmVmZXJlbmNlIG1vZGVsIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjgwMDAiLCI2MSJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+ODAwMC02MTwvZW0+OjIwMTYgc3BlY2lmaWVzIHRoZSBwcm9jZXNzZXMgcmVxdWlyZWQgZm9yIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50LiBUaGUgcHJvY2Vzc2VzIGFyZSB1c2VkIGFzIGEgcmVmZXJlbmNlIHRvIGVuaGFuY2UgZGF0YSBxdWFsaXR5IGFuZCBhc3Nlc3MgcHJvY2VzcyBjYXBhYmlsaXR5IG9yIG9yZ2FuaXphdGlvbmFsIG1hdHVyaXR5IGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudC4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjgwMDAiLCI2MSJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMzgvNzM4MzUiLCJ1dWlkIjoiZTczZGU4ZGUtYmRjNy00MGFkLWFlMjUtNGI1NmJkZmI4NzJkIiwidGl0bGUiOiJJU08vVFMgODAwMC02NToyMDIwIERhdGEgcXVhbGl0eSDigJQgUGFydCA2NTogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IFByb2Nlc3MgbWVhc3VyZW1lbnQgcXVlc3Rpb25uYWlyZSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgcXVlc3Rpb25uYWlyZSB0byBhdWRpdCB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIHByb2Nlc3NlcyBzcGVjaWZpZWQgYnkgdGhlIHByb2Nlc3MgcmVmZXJlbmNlIG1vZGVsIGluIElTTyA4MDAw4oCRNjEuIE5PVEUgMSAgVGhpcyBxdWVzdGlvbm5haXJlIGlzIGFwcGxpY2FibGUgdG8gYWxsIHR5cGVzIG9mIGJ1c2luZXNzIHByb2Nlc3MsIHRlY2hub2xvZ3ksIGluZm9ybWF0aW9uIHN5c3RlbSwgZGF0YSBhbmQgZGF0YSBwcm9jZXNzaW5nLiBUaGlzIHF1ZXN0aW9ubmFpcmUgY2FuIGJlIHVzZWQgYXMgcGFydCBvZiBhIGNvbnRpbnVvdXMgaW1wcm92ZW1lbnQgcHJvY2Vzcy4gVGhlIGZvbGxvd2luZyBhcmUgd2l0aGluIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJQgICAgIGd1aWRpbmcgcHJpbmNpcGxlcyBmb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnMgZnJvbSB0aGUgcHJvY2VzcyBvdXRjb21lcyBzcGVjaWZpZWQgYnkgSVNPIDgwMDDigJE2MTsg4oCUICAgICBvbmUgb3IgbW9yZSBxdWVzdGlvbnMgZm9yIGVhY2ggb3V0Y29tZSBvZiBldmVyeSBwcm9jZXNzIGluIElTTyA4MDAw4oCRNjE7IOKAlCAgICAgYSBtZWFzdXJlbWVudCBtZXRob2QgYmFzZWQgb24gYSBzaW1wbGUgaW5kaWNhdG9yIGFuZCBtZWFzdXJlbWVudCBzY2FsZSBmb3IgZWFjaCBxdWVzdGlvbjsg4oCUICAgICBndWlkYW5jZSBvbiBob3cgdG8gcHJlc2VudCB0aGUgcmVzdWx0cyBnZW5lcmF0ZWQgYnkgdGhlIHF1ZXN0aW9ubmFpcmUuIE5PVEUgMiAgVGhlIHF1ZXN0aW9ucyBhbmQgY29ycmVzcG9uZGluZyBpbmRpY2F0b3JzIGluIHRoaXMgZG9jdW1lbnQgY29uZm9ybSB0byB0aGUgcmVxdWlyZW1lbnRzIG9mIElTTyA4MDAw4oCRNjMuIFRoZSBmb2xsb3dpbmcgaXMgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUICAgICBkZWZpbmluZyBob3cgdGhlIHF1ZXN0aW9ucyByZWxhdGUgdG8gbW9kZWxzIG9mIG9yZ2FuaXphdGlvbmFsIHByb2Nlc3MgbWF0dXJpdHkuIE5PVEUgMyAgU3VjaCBtb2RlbHMgZGVmaW5lIGFuIG92ZXJhbGwgc2NhbGUgYnkgd2hpY2ggdG8gdW5kZXJzdGFuZCB0aGUgZGVncmVlIHRvIHdoaWNoIGFuIG9yZ2FuaXphdGlvbiBpcyBwZXJmb3JtaW5nIGVmZmVjdGl2ZWx5IGFuZCBlZmZpY2llbnRseS4gRVhBTVBMRSAgICBJU08gODAwMOKAkTYyIGFuZCBJU08gODAwMOKAkTY0IFsxXXNwZWNpZnkgaG93IHRvIHVzZSBtYXR1cml0eSBtb2RlbHMgd2l0aCBJU08gODAwMOKAkTYxLiBbMV0gVW5kZXIgcHJlcGFyYXRpb24uICIsIm9iamVjdElEIjoiNzM4MzVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFMgODAwMC02NToyMDIwIERhdGEgcXVhbGl0eSDigJQgUGFydCA2NTogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IFByb2Nlc3MgbWVhc3VyZW1lbnQgcXVlc3Rpb25uYWlyZSIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIHF1ZXN0aW9ubmFpcmUgdG8gYXVkaXQgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBwcm9jZXNzZXMgc3BlY2lmaWVkIGJ5IHRoZSBwcm9jZXNzIHJlZmVyZW5jZSBtb2RlbCBpbiA8ZW0+SVNPPC9lbT4gPGVtPjgwMDDigJE2MTwvZW0+LiBOT1RFIDEgIFRoaXMgcXVlc3Rpb25uYWlyZSBpcyBhcHBsaWNhYmxlIHRvIGFsbCB0eXBlcyBvZiBidXNpbmVzcyBwcm9jZXNzLCB0ZWNobm9sb2d5LCBpbmZvcm1hdGlvbiBzeXN0ZW0sIGRhdGEgYW5kIGRhdGEgcHJvY2Vzc2luZy4gVGhpcyBxdWVzdGlvbm5haXJlIGNhbiBiZSB1c2VkIGFzIHBhcnQgb2YgYSBjb250aW51b3VzIGltcHJvdmVtZW50IHByb2Nlc3MuIFRoZSBmb2xsb3dpbmcgYXJlIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUICAgICBndWlkaW5nIHByaW5jaXBsZXMgZm9yIGdlbmVyYXRpbmcgcXVlc3Rpb25zIGZyb20gdGhlIHByb2Nlc3Mgb3V0Y29tZXMgc3BlY2lmaWVkIGJ5IDxlbT5JU088L2VtPiA8ZW0+ODAwMOKAkTYxPC9lbT47IOKAlCAgICAgb25lIG9yIG1vcmUgcXVlc3Rpb25zIGZvciBlYWNoIG91dGNvbWUgb2YgZXZlcnkgcHJvY2VzcyBpbiA8ZW0+SVNPPC9lbT4gPGVtPjgwMDDigJE2MTwvZW0+OyDigJQgICAgIGEgbWVhc3VyZW1lbnQgbWV0aG9kIGJhc2VkIG9uIGEgc2ltcGxlIGluZGljYXRvciBhbmQgbWVhc3VyZW1lbnQgc2NhbGUgZm9yIGVhY2ggcXVlc3Rpb247IOKAlCAgICAgZ3VpZGFuY2Ugb24gaG93IHRvIHByZXNlbnQgdGhlIHJlc3VsdHMgZ2VuZXJhdGVkIGJ5IHRoZSBxdWVzdGlvbm5haXJlLiBOT1RFIDIgIFRoZSBxdWVzdGlvbnMgYW5kIGNvcnJlc3BvbmRpbmcgaW5kaWNhdG9ycyBpbiB0aGlzIGRvY3VtZW50IGNvbmZvcm0gdG8gdGhlIHJlcXVpcmVtZW50cyBvZiA8ZW0+SVNPPC9lbT4gODAwMOKAkTYzLiBUaGUgZm9sbG93aW5nIGlzIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQ6IOKAlCAgICAgZGVmaW5pbmcgaG93IHRoZSBxdWVzdGlvbnMgcmVsYXRlIHRvIG1vZGVscyBvZiBvcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5LiBOT1RFIDMgIFN1Y2ggbW9kZWxzIGRlZmluZSBhbiBvdmVyYWxsIHNjYWxlIGJ5IHdoaWNoIHRvIHVuZGVyc3RhbmQgdGhlIGRlZ3JlZSB0byB3aGljaCBhbiBvcmdhbml6YXRpb24gaXMgcGVyZm9ybWluZyBlZmZlY3RpdmVseSBhbmQgZWZmaWNpZW50bHkuIEVYQU1QTEUgICAgPGVtPklTTzwvZW0+IDgwMDDigJE2MiBhbmQgPGVtPklTTzwvZW0+IDgwMDDigJE2NCBbMV1zcGVjaWZ5IGhvdyB0byB1c2UgbWF0dXJpdHkgbW9kZWxzIHdpdGggPGVtPklTTzwvZW0+IDxlbT44MDAw4oCRNjE8L2VtPi4gWzFdIFVuZGVyIHByZXBhcmF0aW9uLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiODAwMCIsIjYxIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi81My82NTM0MCIsInV1aWQiOiJjYjJhNmNlOC1mZDA3LTRmYjEtOTE0Zi0zNTE1NWY3YjkxMzMiLCJ0aXRsZSI6IklTTyA4MDAwLTYyOjIwMTggRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDYyOiBEYXRhIHF1YWxpdHkgbWFuYWdlbWVudDogT3JnYW5pemF0aW9uYWwgcHJvY2VzcyBtYXR1cml0eSBhc3Nlc3NtZW50OiBBcHBsaWNhdGlvbiBvZiBzdGFuZGFyZHMgcmVsYXRpbmcgdG8gcHJvY2VzcyBhc3Nlc3NtZW50Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOCwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcGFydGljdWxhciBlbGVtZW50cyBvZiBhIG1hdHVyaXR5IG1vZGVsLiBUaGVzZSBlbGVtZW50cyBjb25mb3JtIHRvIElTTy9JRUMgMzMwMDQuIE9yZ2FuaXphdGlvbnMgY2FuIHVzZSB0aGVzZSBlbGVtZW50cyBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZWlyIG93biBhc3Nlc3NtZW50IGluZGljYXRvcnMgdG8gZGV0ZXJtaW5lIHRoZSBtYXR1cml0eSBsZXZlbCBvZiBwcm9jZXNzZXMgZm9yIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50IGFzIHNwZWNpZmllZCBieSBJU08gODAwMOKAkTYxLiBUaGUgZm9sbG93aW5nIGFyZSB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQ6IC0gICAgICBzb21lIG9mIHRoZSBlbGVtZW50cyBvZiBhIG1vZGVsIGZvciBhc3Nlc3Npbmcgb3JnYW5pemF0aW9uYWwgcHJvY2VzcyBtYXR1cml0eTsgLSAgICAgIGlkZW50aWZ5aW5nIHRob3NlIGVsZW1lbnRzIHRoYXQgZXhpc3QgaW4gb3RoZXIgc3RhbmRhcmRzIChwcm9jZXNzIGNhcGFiaWxpdHkgbGV2ZWxzLCBwcm9jZXNzIGF0dHJpYnV0ZXMsIG9yZGluYWwgc2NhbGUgZm9yIG1lYXN1cmluZyBwcm9jZXNzIGF0dHJpYnV0ZXMgYW5kIHRoZSBzY2hlbWUgZm9yIGRlcml2YXRpb24gb2YgcHJvY2VzcyBjYXBhYmlsaXR5IGxldmVscyBmcm9tIHByb2Nlc3MgYXR0cmlidXRlIHJhdGluZyk7IC0gICAgICBzcGVjaWZ5aW5nIHNpeCBtYXR1cml0eSBsZXZlbHMgYW5kIHByb2Nlc3MgcHJvZmlsZXMgdG8gaW5kaWNhdGUgd2hlbiBvcmdhbml6YXRpb25zIGhhdmUgYWNoaWV2ZWQgZWFjaCBvZiB0aGUgbWF0dXJpdHkgbGV2ZWxzOyAtICAgICAgcHJvdmlkaW5nIGd1aWRhbmNlIG9uIGhvdyB0byBhc3Nlc3MgdGhlIG1hdHVyaXR5IGxldmVsIG9mIGFuIG9yZ2FuaXphdGlvbi4gTWV0aG9kcyBvciBwcm9jZWR1cmVzIHRvIGltcHJvdmUgb3JnYW5pemF0aW9uYWwgbWF0dXJpdHkgYXJlIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQuIFRoaXMgZG9jdW1lbnQgY2FuIGJlIHVzZWQgYnkgdGhlIG9yZ2FuaXphdGlvbiBpdHNlbGYgb3IgYnkgYW5vdGhlciBwYXJ0eSAoaW5jbHVkaW5nIGNlcnRpZmljYXRpb24gYm9kaWVzKSB0byBwZXJmb3JtIGFzc2Vzc21lbnQgb2YgdGhlIG1hdHVyaXR5LiBUaGlzIGRvY3VtZW50IGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGgsIG9yIGluZGVwZW5kZW50bHkgb2YsIHF1YWxpdHkgbWFuYWdlbWVudCBzeXN0ZW1zIHN0YW5kYXJkcy4gIiwib2JqZWN0SUQiOiI2NTM0MF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA4MDAwLTYyOjIwMTggRGF0YSBxdWFsaXR5IOKAlCBQYXJ0IDYyOiBEYXRhIHF1YWxpdHkgbWFuYWdlbWVudDogT3JnYW5pemF0aW9uYWwgcHJvY2VzcyBtYXR1cml0eSBhc3Nlc3NtZW50OiBBcHBsaWNhdGlvbiBvZiBzdGFuZGFyZHMgcmVsYXRpbmcgdG8gcHJvY2VzcyBhc3Nlc3NtZW50IiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHBhcnRpY3VsYXIgZWxlbWVudHMgb2YgYSBtYXR1cml0eSBtb2RlbC4gVGhlc2UgZWxlbWVudHMgY29uZm9ybSB0byA8ZW0+SVNPPC9lbT4vSUVDIDMzMDA0LiBPcmdhbml6YXRpb25zIGNhbiB1c2UgdGhlc2UgZWxlbWVudHMgaW4gY29tYmluYXRpb24gd2l0aCB0aGVpciBvd24gYXNzZXNzbWVudCBpbmRpY2F0b3JzIHRvIGRldGVybWluZSB0aGUgbWF0dXJpdHkgbGV2ZWwgb2YgcHJvY2Vzc2VzIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCBhcyBzcGVjaWZpZWQgYnkgPGVtPklTTzwvZW0+IDxlbT44MDAw4oCRNjE8L2VtPi4gVGhlIGZvbGxvd2luZyBhcmUgd2l0aGluIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiAtICAgICAgc29tZSBvZiB0aGUgZWxlbWVudHMgb2YgYSBtb2RlbCBmb3IgYXNzZXNzaW5nIG9yZ2FuaXphdGlvbmFsIHByb2Nlc3MgbWF0dXJpdHk7IC0gICAgICBpZGVudGlmeWluZyB0aG9zZSBlbGVtZW50cyB0aGF0IGV4aXN0IGluIG90aGVyIHN0YW5kYXJkcyAocHJvY2VzcyBjYXBhYmlsaXR5IGxldmVscywgcHJvY2VzcyBhdHRyaWJ1dGVzLCBvcmRpbmFsIHNjYWxlIGZvciBtZWFzdXJpbmcgcHJvY2VzcyBhdHRyaWJ1dGVzIGFuZCB0aGUgc2NoZW1lIGZvciBkZXJpdmF0aW9uIG9mIHByb2Nlc3MgY2FwYWJpbGl0eSBsZXZlbHMgZnJvbSBwcm9jZXNzIGF0dHJpYnV0ZSByYXRpbmcpOyAtICAgICAgc3BlY2lmeWluZyBzaXggbWF0dXJpdHkgbGV2ZWxzIGFuZCBwcm9jZXNzIHByb2ZpbGVzIHRvIGluZGljYXRlIHdoZW4gb3JnYW5pemF0aW9ucyBoYXZlIGFjaGlldmVkIGVhY2ggb2YgdGhlIG1hdHVyaXR5IGxldmVsczsgLSAgICAgIHByb3ZpZGluZyBndWlkYW5jZSBvbiBob3cgdG8gYXNzZXNzIHRoZSBtYXR1cml0eSBsZXZlbCBvZiBhbiBvcmdhbml6YXRpb24uIE1ldGhvZHMgb3IgcHJvY2VkdXJlcyB0byBpbXByb3ZlIG9yZ2FuaXphdGlvbmFsIG1hdHVyaXR5IGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50LiBUaGlzIGRvY3VtZW50IGNhbiBiZSB1c2VkIGJ5IHRoZSBvcmdhbml6YXRpb24gaXRzZWxmIG9yIGJ5IGFub3RoZXIgcGFydHkgKGluY2x1ZGluZyBjZXJ0aWZpY2F0aW9uIGJvZGllcykgdG8gcGVyZm9ybSBhc3Nlc3NtZW50IG9mIHRoZSBtYXR1cml0eS4gVGhpcyBkb2N1bWVudCBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoLCBvciBpbmRlcGVuZGVudGx5IG9mLCBxdWFsaXR5IG1hbmFnZW1lbnQgc3lzdGVtcyBzdGFuZGFyZHMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI4MDAwIiwiNjEiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzYzLzc2MzkwIiwidXVpZCI6IjZmYzIwYzQwLTE2ZmEtNDNiYy05NmJhLTk2MDk3MjQzOTU2ZSIsInRpdGxlIjoiSVNPIDgwMDAtNjY6MjAyMSBEYXRhIHF1YWxpdHkg4oCUIFBhcnQgNjY6IERhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OiBBc3Nlc3NtZW50IGluZGljYXRvcnMgZm9yIGRhdGEgcHJvY2Vzc2luZyBpbiBtYW51ZmFjdHVyaW5nIG9wZXJhdGlvbnMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhc3Nlc3NtZW50IGluZGljYXRvcnMgdG8gc3VwcG9ydCB0aGUgYXNzZXNzbWVudCBvZiBvcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5IGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCBpbiB0aGUgY29udGV4dCBvZiBtYW51ZmFjdHVyaW5nIG9wZXJhdGlvbnMgbWFuYWdlbWVudCBhcyBzcGVjaWZpZWQgYnkgSUVDwqA2MjI2NOKAkTEuIFRoZSBmb2xsb3dpbmcgYXJlIHdpdGhpbiBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJTCoMKgwqAgYXNzZXNzbWVudCBpbmRpY2F0b3JzIHRoYXQgYXJlIHdvcmsgcHJvZHVjdHMgZ2VuZXJhdGVkIGJ5IGRhdGEgcHJvY2Vzc2luZyAoYXMgc3BlY2lmaWVkIGJ5IElTT8KgODAwMOKAkTYxKSBhbmQsIHRodXMsIGVuYWJsZSByYXRpbmcgb2YgcHJvY2VzcyBwZXJmb3JtYW5jZSwgYSBwcm9jZXNzIGF0dHJpYnV0ZSBzcGVjaWZpZWQgYnkgSVNPL0lFQ8KgMzMwMjA7IOKAlMKgwqDCoCB0aGUgcm9sZSBwbGF5ZWQgYnkgZWFjaCB3b3JrIHByb2R1Y3QgaW4gdGhlIHByb2Nlc3NlcyBvZiBtYW51ZmFjdHVyaW5nIG9wZXJhdGlvbnMgbWFuYWdlbWVudDsg4oCUwqDCoMKgIHRoZSBjb25uZWN0aW9uIG9mIGVhY2ggd29yayBwcm9kdWN0IHRvIHRoZSBvdXRjb21lcyBvZiB0aGUgcHJvY2Vzc2VzIG9mIG1hbnVmYWN0dXJpbmcgb3BlcmF0aW9ucyBtYW5hZ2VtZW50LiBUaGUgZm9sbG93aW5nIGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJTCoMKgwqAgYXNzZXNzbWVudCBpbmRpY2F0b3JzIGZvciBhbnkgb2YgdGhlIG90aGVyIHByb2Nlc3MgYXR0cmlidXRlcyBzcGVjaWZpZWQgYnkgSVNPL0lFQ8KgMzMwMjA7IOKAlMKgwqDCoCBtZXRob2RzIG9yIHByb2NlZHVyZXMgdG8gbWVhc3VyZSBwcm9jZXNzIGNhcGFiaWxpdHkuICIsIm9iamVjdElEIjoiNzYzOTBfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gODAwMC02NjoyMDIxIERhdGEgcXVhbGl0eSDigJQgUGFydCA2NjogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IEFzc2Vzc21lbnQgaW5kaWNhdG9ycyBmb3IgZGF0YSBwcm9jZXNzaW5nIGluIG1hbnVmYWN0dXJpbmcgb3BlcmF0aW9ucyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhc3Nlc3NtZW50IGluZGljYXRvcnMgdG8gc3VwcG9ydCB0aGUgYXNzZXNzbWVudCBvZiBvcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5IGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCBpbiB0aGUgY29udGV4dCBvZiBtYW51ZmFjdHVyaW5nIG9wZXJhdGlvbnMgbWFuYWdlbWVudCBhcyBzcGVjaWZpZWQgYnkgSUVDwqA2MjI2NOKAkTEuIFRoZSBmb2xsb3dpbmcgYXJlIHdpdGhpbiBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJTCoMKgwqAgYXNzZXNzbWVudCBpbmRpY2F0b3JzIHRoYXQgYXJlIHdvcmsgcHJvZHVjdHMgZ2VuZXJhdGVkIGJ5IGRhdGEgcHJvY2Vzc2luZyAoYXMgc3BlY2lmaWVkIGJ5IDxlbT5JU088L2VtPsKgPGVtPjgwMDDigJE2MTwvZW0+KSBhbmQsIHRodXMsIGVuYWJsZSByYXRpbmcgb2YgcHJvY2VzcyBwZXJmb3JtYW5jZSwgYSBwcm9jZXNzIGF0dHJpYnV0ZSBzcGVjaWZpZWQgYnkgPGVtPklTTzwvZW0+L0lFQ8KgMzMwMjA7IOKAlMKgwqDCoCB0aGUgcm9sZSBwbGF5ZWQgYnkgZWFjaCB3b3JrIHByb2R1Y3QgaW4gdGhlIHByb2Nlc3NlcyBvZiBtYW51ZmFjdHVyaW5nIG9wZXJhdGlvbnMgbWFuYWdlbWVudDsg4oCUwqDCoMKgIHRoZSBjb25uZWN0aW9uIG9mIGVhY2ggd29yayBwcm9kdWN0IHRvIHRoZSBvdXRjb21lcyBvZiB0aGUgcHJvY2Vzc2VzIG9mIG1hbnVmYWN0dXJpbmcgb3BlcmF0aW9ucyBtYW5hZ2VtZW50LiBUaGUgZm9sbG93aW5nIGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJTCoMKgwqAgYXNzZXNzbWVudCBpbmRpY2F0b3JzIGZvciBhbnkgb2YgdGhlIG90aGVyIHByb2Nlc3MgYXR0cmlidXRlcyBzcGVjaWZpZWQgYnkgPGVtPklTTzwvZW0+L0lFQ8KgMzMwMjA7IOKAlMKgwqDCoCBtZXRob2RzIG9yIHByb2NlZHVyZXMgdG8gbWVhc3VyZSBwcm9jZXNzIGNhcGFiaWxpdHkuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI4MDAwIiwiNjEiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA4LzA3LzgwNzUyIiwidXVpZCI6ImMyYmVjMmNhLTQ2MmMtNGU3ZC1iY2YxLTlkMDM3ZGE1YmRhMyIsInRpdGxlIjoiSVNPIDgwMDAtNjQ6MjAyMiBEYXRhIHF1YWxpdHkg4oCUIFBhcnQgNjQ6IERhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OiBPcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5IGFzc2Vzc21lbnQ6IEFwcGxpY2F0aW9uIG9mIHRoZSBUZXN0IFByb2Nlc3MgSW1wcm92ZW1lbnQgbWV0aG9kIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgaG93IHRvIGFwcGx5IHRoZSBUZXN0IFByb2Nlc3MgSW1wcm92ZW1lbnQgbWV0aG9kIHRvIHRoZSBhc3Nlc3NtZW50IG9mIG9yZ2FuaXphdGlvbmFsIHByb2Nlc3MgbWF0dXJpdHkuIFRoaXMgZG9jdW1lbnQgcmVmaW5lcyB0aGUgbGFuZ3VhZ2UgaW4gdGhlIG1ldGhvZCwgd2hpY2ggaGFzIGFuIG9yaWdpbmFsIHB1cnBvc2Ugb2YgbW9yZSB0aGFuIGp1c3QgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQuIFRoaXMgZG9jdW1lbnQgc3VwcG9ydHMgaW1wcm92aW5nIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50IHdoZW4gYW4gb3JnYW5pemF0aW9uIHVzZXMgdGhlIHByb2Nlc3MgcmVmZXJlbmNlIG1vZGVsIGluIElTT8KgODAwMOKAkTYxIGFzIHRoZSBmb3VuZGF0aW9uIGZvciBzcGVjaWZ5aW5nIHRoZSBtZWFzdXJlbWVudCBnb2FscyBmb3IgdGhlIHByb2Nlc3MgbWVhc3VyZW1lbnQgbmVjZXNzYXJ5IHdoZW4gcGVyZm9ybWluZyBtYXR1cml0eSBhc3Nlc3NtZW50LiBUaGUgZm9sbG93aW5nIGFyZSB3aXRoaW4gc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUwqDCoMKgIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgVGVzdCBQcm9jZXNzIEltcHJvdmVtZW50IG1ldGhvZCBbMTFdWzEyXSBhbmQgdGhlIHByb2NlZHVyZSBmb3IgYXNzZXNzaW5nIHByb2Nlc3MgbWF0dXJpdHkgb2YgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQgYXMgc3BlY2lmaWVkIGJ5IElTT8KgODAwMOKAkTYxOyDigJTCoMKgwqAgdGhlIHJvbGUgb2YgcHJvY2VzcyBtZWFzdXJlbWVudCBpbiBhY2NvcmRhbmNlIHdpdGggSVNPwqA4MDAw4oCRNjMgd2hlbiBwZXJmb3JtaW5nIGFzc2Vzc21lbnQgb2YgcHJvY2VzcyBtYXR1cml0eTsg4oCUwqDCoMKgIHRoZSBvdXRwdXRzIGZyb20gdGhlIHByb2NlZHVyZS4gVGhlIGZvbGxvd2luZyBhcmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUwqDCoMKgIHRoZSBwdXJwb3NlLCBvdXRjb21lcyBhbmQgYWN0aXZpdGllcyBvZiBwcm9jZXNzZXMgZm9yIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OyDigJTCoMKgwqAgc3BlY2lmaWMgY29udGVudCBmb3IgdGhlIHNjb3BlIG9mIGluZGl2aWR1YWwgcXVhbGl0eSBtYW5hZ2VtZW50IGFyZWFzLCB0aGUgbWF0dXJpdHkgbGV2ZWxzIGFuZCB0aGUgbWF0dXJpdHkgbGV2ZWwgdGFyZ2V0czsg4oCUwqDCoMKgIHNwZWNpZmljIGNvbnRlbnQgZm9yIGVhY2ggaW5zcGVjdGlvbiBvcmRlciBpbmNsdWRpbmcgdGhlIGZyZXF1ZW5jeSBvZiBpbnNwZWN0aW9uIHBvaW50czsg4oCUwqDCoMKgIGluc3RydWN0aW9ucyBvbiBob3cgdG8gZGV2ZWxvcCBhIHByb2Nlc3MgaW1wcm92ZW1lbnQgc3RyYXRlZ3kgaW4gcmVzcG9uc2UgdG8gdGhlIG91dHB1dHMgb2YgdGhlIHByb2NlZHVyZS4gVGhpcyBkb2N1bWVudCBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIG9yIGluZGVwZW5kZW50bHkgb2YgcXVhbGl0eSBtYW5hZ2VtZW50IHN5c3RlbXMgc3RhbmRhcmRzLiAiLCJvYmplY3RJRCI6IjgwNzUyXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDgwMDAtNjQ6MjAyMiBEYXRhIHF1YWxpdHkg4oCUIFBhcnQgNjQ6IERhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OiBPcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5IGFzc2Vzc21lbnQ6IEFwcGxpY2F0aW9uIG9mIHRoZSBUZXN0IFByb2Nlc3MgSW1wcm92ZW1lbnQgbWV0aG9kIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGhvdyB0byBhcHBseSB0aGUgVGVzdCBQcm9jZXNzIEltcHJvdmVtZW50IG1ldGhvZCB0byB0aGUgYXNzZXNzbWVudCBvZiBvcmdhbml6YXRpb25hbCBwcm9jZXNzIG1hdHVyaXR5LiBUaGlzIGRvY3VtZW50IHJlZmluZXMgdGhlIGxhbmd1YWdlIGluIHRoZSBtZXRob2QsIHdoaWNoIGhhcyBhbiBvcmlnaW5hbCBwdXJwb3NlIG9mIG1vcmUgdGhhbiBqdXN0IGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50LiBUaGlzIGRvY3VtZW50IHN1cHBvcnRzIGltcHJvdmluZyBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCB3aGVuIGFuIG9yZ2FuaXphdGlvbiB1c2VzIHRoZSBwcm9jZXNzIHJlZmVyZW5jZSBtb2RlbCBpbiA8ZW0+SVNPPC9lbT7CoDxlbT44MDAw4oCRNjE8L2VtPiBhcyB0aGUgZm91bmRhdGlvbiBmb3Igc3BlY2lmeWluZyB0aGUgbWVhc3VyZW1lbnQgZ29hbHMgZm9yIHRoZSBwcm9jZXNzIG1lYXN1cmVtZW50IG5lY2Vzc2FyeSB3aGVuIHBlcmZvcm1pbmcgbWF0dXJpdHkgYXNzZXNzbWVudC4gVGhlIGZvbGxvd2luZyBhcmUgd2l0aGluIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQ6IOKAlMKgwqDCoCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIFRlc3QgUHJvY2VzcyBJbXByb3ZlbWVudCBtZXRob2QgWzExXVsxMl0gYW5kIHRoZSBwcm9jZWR1cmUgZm9yIGFzc2Vzc2luZyBwcm9jZXNzIG1hdHVyaXR5IG9mIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50IGFzIHNwZWNpZmllZCBieSA8ZW0+SVNPPC9lbT7CoDxlbT44MDAw4oCRNjE8L2VtPjsg4oCUwqDCoMKgIHRoZSByb2xlIG9mIHByb2Nlc3MgbWVhc3VyZW1lbnQgaW4gYWNjb3JkYW5jZSB3aXRoIDxlbT5JU088L2VtPsKgODAwMOKAkTYzIHdoZW4gcGVyZm9ybWluZyBhc3Nlc3NtZW50IG9mIHByb2Nlc3MgbWF0dXJpdHk7IOKAlMKgwqDCoCB0aGUgb3V0cHV0cyBmcm9tIHRoZSBwcm9jZWR1cmUuIFRoZSBmb2xsb3dpbmcgYXJlIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQ6IOKAlMKgwqDCoCB0aGUgcHVycG9zZSwgb3V0Y29tZXMgYW5kIGFjdGl2aXRpZXMgb2YgcHJvY2Vzc2VzIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudDsg4oCUwqDCoMKgIHNwZWNpZmljIGNvbnRlbnQgZm9yIHRoZSBzY29wZSBvZiBpbmRpdmlkdWFsIHF1YWxpdHkgbWFuYWdlbWVudCBhcmVhcywgdGhlIG1hdHVyaXR5IGxldmVscyBhbmQgdGhlIG1hdHVyaXR5IGxldmVsIHRhcmdldHM7IOKAlMKgwqDCoCBzcGVjaWZpYyBjb250ZW50IGZvciBlYWNoIGluc3BlY3Rpb24gb3JkZXIgaW5jbHVkaW5nIHRoZSBmcmVxdWVuY3kgb2YgaW5zcGVjdGlvbiBwb2ludHM7IOKAlMKgwqDCoCBpbnN0cnVjdGlvbnMgb24gaG93IHRvIGRldmVsb3AgYSBwcm9jZXNzIGltcHJvdmVtZW50IHN0cmF0ZWd5IGluIHJlc3BvbnNlIHRvIHRoZSBvdXRwdXRzIG9mIHRoZSBwcm9jZWR1cmUuIFRoaXMgZG9jdW1lbnQgY2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBvciBpbmRlcGVuZGVudGx5IG9mIHF1YWxpdHkgbWFuYWdlbWVudCBzeXN0ZW1zIHN0YW5kYXJkcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjgwMDAiLCI2MSJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNjIvNjYyMzQiLCJ1dWlkIjoiOTEzNDAwZDEtNzYyMS00YTU4LTkyMDEtOWM2ODY3OGNlN2IxIiwidGl0bGUiOiJJU08vVFMgODAwMC02MDoyMDE3IERhdGEgcXVhbGl0eSDigJQgUGFydCA2MDogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IE92ZXJ2aWV3Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RTIDgwMDDigJE2MDoyMDE3IGludHJvZHVjZXMgdGhlIGNvbmNlcHRzIHdpdGhpbiB0aGUgcGFydHMgb2YgSVNPIDgwMDAgcmVsYXRlZCB0byBpbXBsZW1lbnRpbmcsIGFzc2Vzc2luZyBhbmQgaW1wcm92aW5nIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50LiBUaGUgZm9sbG93aW5nIGFyZSB3aXRoaW4gdGhlIHNjb3BlIG9mIElTTy9UUyA4MDAw4oCRNjA6MjAxNzogwrcgICAgICAgICBhIHN0YXRlbWVudCBvZiB0aGUgb3ZlcmFsbCBzY29wZSBvZiB0aG9zZSBwYXJ0cyBvZiBJU08gODAwMCByZWxhdGVkIHRvIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OyDCtyAgICAgICAgIGFuIG92ZXJ2aWV3IG9mIElTTyA4MDAw4oCRNjEsIHdoaWNoIHNwZWNpZmllcyBhIHByb2Nlc3MgcmVmZXJlbmNlIG1vZGVsIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudDsgwrcgICAgICAgICBhbiBvdmVydmlldyBvZiBJU08gODAwMOKAkTYyLCB3aGljaCBzcGVjaWZpZXMgYSBtb2RlbCB0aGF0IGNvbmZvcm1zIHRvIHNvbWUgb2YgdGhlIHJlcXVpcmVtZW50cyBvZiBJU08vSUVDIDMzMDA0IGFuZCB0aGF0IGVzdGFibGlzaGVzIGEgYmFzaXMgb24gd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBtYXR1cml0eSBvZiBhbiBvcmdhbml6YXRpb24gd2l0aCByZXNwZWN0IHRvIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OyDCtyAgICAgICAgIGFuIG92ZXJ2aWV3IG9mIElTTyA4MDAwLTYzLCB3aGljaCBzcGVjaWZpZXMgdGhlIG1lYXN1cmVtZW50IHByb2NlZHVyZSBhbmQgbWVhc3VyZW1lbnQgc3RhY2sgYnkgd2hpY2ggdG8gbWVhc3VyZSB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHByb2Nlc3NlcyBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ7IMK3ICAgICAgICAgYW4gb3ZlcnZpZXcgb2YgSVNPIDgwMDDigJE2NCwgd2hpY2ggc3BlY2lmaWVzIGEgbW9kZWwgdGhhdCBhcHBsaWVzIHRoZSBUZXN0IFByb2Nlc3MgSW1wcm92ZW1lbnQgbWV0aG9kIGFzIGEgYmFzaXMgb24gd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBtYXR1cml0eSBvZiBhbiBvcmdhbml6YXRpb24gd2l0aCByZXNwZWN0IHRvIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50LiBUaGUgZGV0YWlscyBmb3IgaW1wbGVtZW50aW5nIHRoZSBwYXJ0cyBvZiBJU08gODAwMCByZWxhdGVkIHRvIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50IGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiBJU08vVFMgODAwMOKAkTYwOjIwMTcuICIsIm9iamVjdElEIjoiNjYyMzRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFMgODAwMC02MDoyMDE3IERhdGEgcXVhbGl0eSDigJQgUGFydCA2MDogRGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ6IE92ZXJ2aWV3IiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUyA4MDAw4oCRNjA6MjAxNyBpbnRyb2R1Y2VzIHRoZSBjb25jZXB0cyB3aXRoaW4gdGhlIHBhcnRzIG9mIDxlbT5JU088L2VtPiA4MDAwIHJlbGF0ZWQgdG8gaW1wbGVtZW50aW5nLCBhc3Nlc3NpbmcgYW5kIGltcHJvdmluZyBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudC4gVGhlIGZvbGxvd2luZyBhcmUgd2l0aGluIHRoZSBzY29wZSBvZiA8ZW0+SVNPPC9lbT4vVFMgODAwMOKAkTYwOjIwMTc6IMK3ICAgICAgICAgYSBzdGF0ZW1lbnQgb2YgdGhlIG92ZXJhbGwgc2NvcGUgb2YgdGhvc2UgcGFydHMgb2YgPGVtPklTTzwvZW0+IDgwMDAgcmVsYXRlZCB0byBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudDsgwrcgICAgICAgICBhbiBvdmVydmlldyBvZiA8ZW0+SVNPPC9lbT4gPGVtPjgwMDDigJE2MTwvZW0+LCB3aGljaCBzcGVjaWZpZXMgYSBwcm9jZXNzIHJlZmVyZW5jZSBtb2RlbCBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ7IMK3ICAgICAgICAgYW4gb3ZlcnZpZXcgb2YgPGVtPklTTzwvZW0+IDgwMDDigJE2Miwgd2hpY2ggc3BlY2lmaWVzIGEgbW9kZWwgdGhhdCBjb25mb3JtcyB0byBzb21lIG9mIHRoZSByZXF1aXJlbWVudHMgb2YgPGVtPklTTzwvZW0+L0lFQyAzMzAwNCBhbmQgdGhhdCBlc3RhYmxpc2hlcyBhIGJhc2lzIG9uIHdoaWNoIHRvIGRldGVybWluZSB0aGUgbWF0dXJpdHkgb2YgYW4gb3JnYW5pemF0aW9uIHdpdGggcmVzcGVjdCB0byBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudDsgwrcgICAgICAgICBhbiBvdmVydmlldyBvZiA8ZW0+SVNPPC9lbT4gODAwMC02Mywgd2hpY2ggc3BlY2lmaWVzIHRoZSBtZWFzdXJlbWVudCBwcm9jZWR1cmUgYW5kIG1lYXN1cmVtZW50IHN0YWNrIGJ5IHdoaWNoIHRvIG1lYXN1cmUgdGhlIGNoYXJhY3RlcmlzdGljcyBvZiBwcm9jZXNzZXMgZm9yIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OyDCtyAgICAgICAgIGFuIG92ZXJ2aWV3IG9mIDxlbT5JU088L2VtPiA4MDAw4oCRNjQsIHdoaWNoIHNwZWNpZmllcyBhIG1vZGVsIHRoYXQgYXBwbGllcyB0aGUgVGVzdCBQcm9jZXNzIEltcHJvdmVtZW50IG1ldGhvZCBhcyBhIGJhc2lzIG9uIHdoaWNoIHRvIGRldGVybWluZSB0aGUgbWF0dXJpdHkgb2YgYW4gb3JnYW5pemF0aW9uIHdpdGggcmVzcGVjdCB0byBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudC4gVGhlIGRldGFpbHMgZm9yIGltcGxlbWVudGluZyB0aGUgcGFydHMgb2YgPGVtPklTTzwvZW0+IDgwMDAgcmVsYXRlZCB0byBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCBhcmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgPGVtPklTTzwvZW0+L1RTIDgwMDDigJE2MDoyMDE3LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiODAwMCIsIjYxIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC8wNy84MDc1MyIsInV1aWQiOiI1MTg4NDQ1Mi1kNDBmLTQ2ODQtYWMxNi02YTg4ZDYxYjUyZGIiLCJ0aXRsZSI6IklTTyA4MDAwLTE1MDoyMDIyIERhdGEgcXVhbGl0eSDigJQgUGFydCAxNTA6IERhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OiBSb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBrZXkgY29uc2lkZXJhdGlvbnMgZm9yIG9yZ2FuaXphdGlvbnMgdGhhdCBhcmUgZXN0YWJsaXNoaW5nIGFwcHJvcHJpYXRlIHJvbGVzIGFuZCByZXNwb25zaWJpbGl0aWVzIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudC4gVGhlIGZvbGxvd2luZyBhcmUgd2l0aGluIHRoZSBzY29wZSBvZiB0aGlzIGRvY3VtZW50OiDigJTCoMKgwqAgaW1wbGVtZW50aW5nIHJvbGVzIGFuZCByZXNwb25zaWJpbGl0aWVzIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudDsg4oCUwqDCoMKgIHByb3ZpZGluZyBkb2N1bWVudGFyeSBldmlkZW5jZSBvZiB0aGlzIGltcGxlbWVudGF0aW9uOyDigJTCoMKgwqAgYSBmcmFtZXdvcmsgZm9yIHJvbGVzIGFuZCByZXNwb25zaWJpbGl0aWVzOyDigJTCoMKgwqAgYSBmdW5jdGlvbmFsIG1vZGVsIG9mIHJvbGVzIGFuZCByZXNwb25zaWJpbGl0aWVzOyDigJTCoMKgwqAgZXhhbXBsZSBkZXBsb3ltZW50IHNjZW5hcmlvcyBmb3IgdGhlIGZyYW1ld29yayBvZiByb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllczsg4oCUwqDCoMKgIGNvbXBhcmlzb24gd2l0aCB0aGUgcHJvY2Vzc2VzIHNwZWNpZmllZCBieSBJU0/CoDgwMDDigJE2MS4gVGhlIGZvbGxvd2luZyBhcmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUwqDCoMKgIHByb2Nlc3MgcmVmZXJlbmNlIG1vZGVscyBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQgKElTT8KgODAwMOKAkTYxIHNwZWNpZmllcyBhIHByb2Nlc3MgcmVmZXJlbmNlIG1vZGVsIGZvciBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCk7IOKAlMKgwqDCoCBtZXRob2RzIGZvciBkYXRhIHF1YWxpdHkgZXZhbHVhdGlvbiBhbmQgY2VydGlmaWNhdGlvbjsg4oCUwqDCoMKgIG1vZGVscyBmb3IgYXNzZXNzaW5nIHRoZSBtYXR1cml0eSBvZiBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCAoSVNPwqA4MDAw4oCRNjIgYW5kIElTT8KgODAwMOKAkTY0IHNwZWNpZnkgYXBwcm9hY2hlcyB0byBhc3Nlc3NpbmcgdGhlIG1hdHVyaXR5IG9mIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50KS4gVGhpcyBkb2N1bWVudCBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIG9yIGluZGVwZW5kZW50bHkgb2Ygc3RhbmRhcmRzIGZvciBxdWFsaXR5IG1hbmFnZW1lbnQgc3lzdGVtcy4gIiwib2JqZWN0SUQiOiI4MDc1M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA4MDAwLTE1MDoyMDIyIERhdGEgcXVhbGl0eSDigJQgUGFydCAxNTA6IERhdGEgcXVhbGl0eSBtYW5hZ2VtZW50OiBSb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllcyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUga2V5IGNvbnNpZGVyYXRpb25zIGZvciBvcmdhbml6YXRpb25zIHRoYXQgYXJlIGVzdGFibGlzaGluZyBhcHByb3ByaWF0ZSByb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllcyBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQuIFRoZSBmb2xsb3dpbmcgYXJlIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhpcyBkb2N1bWVudDog4oCUwqDCoMKgIGltcGxlbWVudGluZyByb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllcyBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQ7IOKAlMKgwqDCoCBwcm92aWRpbmcgZG9jdW1lbnRhcnkgZXZpZGVuY2Ugb2YgdGhpcyBpbXBsZW1lbnRhdGlvbjsg4oCUwqDCoMKgIGEgZnJhbWV3b3JrIGZvciByb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllczsg4oCUwqDCoMKgIGEgZnVuY3Rpb25hbCBtb2RlbCBvZiByb2xlcyBhbmQgcmVzcG9uc2liaWxpdGllczsg4oCUwqDCoMKgIGV4YW1wbGUgZGVwbG95bWVudCBzY2VuYXJpb3MgZm9yIHRoZSBmcmFtZXdvcmsgb2Ygcm9sZXMgYW5kIHJlc3BvbnNpYmlsaXRpZXM7IOKAlMKgwqDCoCBjb21wYXJpc29uIHdpdGggdGhlIHByb2Nlc3NlcyBzcGVjaWZpZWQgYnkgPGVtPklTTzwvZW0+wqA8ZW0+ODAwMOKAkTYxPC9lbT4uIFRoZSBmb2xsb3dpbmcgYXJlIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoaXMgZG9jdW1lbnQ6IOKAlMKgwqDCoCBwcm9jZXNzIHJlZmVyZW5jZSBtb2RlbHMgZm9yIGRhdGEgcXVhbGl0eSBtYW5hZ2VtZW50ICg8ZW0+SVNPPC9lbT7CoDxlbT44MDAw4oCRNjE8L2VtPiBzcGVjaWZpZXMgYSBwcm9jZXNzIHJlZmVyZW5jZSBtb2RlbCBmb3IgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQpOyDigJTCoMKgwqAgbWV0aG9kcyBmb3IgZGF0YSBxdWFsaXR5IGV2YWx1YXRpb24gYW5kIGNlcnRpZmljYXRpb247IOKAlMKgwqDCoCBtb2RlbHMgZm9yIGFzc2Vzc2luZyB0aGUgbWF0dXJpdHkgb2YgZGF0YSBxdWFsaXR5IG1hbmFnZW1lbnQgKDxlbT5JU088L2VtPsKgODAwMOKAkTYyIGFuZCA8ZW0+SVNPPC9lbT7CoDgwMDDigJE2NCBzcGVjaWZ5IGFwcHJvYWNoZXMgdG8gYXNzZXNzaW5nIHRoZSBtYXR1cml0eSBvZiBkYXRhIHF1YWxpdHkgbWFuYWdlbWVudCkuIFRoaXMgZG9jdW1lbnQgY2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBvciBpbmRlcGVuZGVudGx5IG9mIHN0YW5kYXJkcyBmb3IgcXVhbGl0eSBtYW5hZ2VtZW50IHN5c3RlbXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI4MDAwIiwiNjEiXX19fV0sIm5iSGl0cyI6NywicGFnZSI6MCwibmJQYWdlcyI6MSwiaGl0c1BlclBhZ2UiOjEwMCwiZXhoYXVzdGl2ZU5iSGl0cyI6dHJ1ZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjp0cnVlLCJ0eXBvIjp0cnVlfSwicXVlcnkiOiJJU08gODAwMC02MSIsInBhcmFtcyI6InF1ZXJ5PUlTTys4MDAwLTYxJmhpdHNQZXJQYWdlPTEwMCZmaWx0ZXJzPWNhdGVnb3J5JTNBc3RhbmRhcmQiLCJwcm9jZXNzaW5nVGltZU1TIjoxLCJwcm9jZXNzaW5nVGltaW5nc01TIjp7InJlcXVlc3QiOnsicm91bmRUcmlwIjo0NX0sInRvdGFsIjoxfSwic2VydmVyVGltZU1TIjoxfQ==
  recorded_at: Sat, 20 May 2023 16:21:45 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=4B5F0086C8A35A076D677545C837BA01; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 20 May 2023 16:21:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 20 May 2023 16:21:45 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/85/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=72B0C5D39D0FC4BB35D17B1DFB3B0700; Path=/; Secure; HttpOnly
      Location:
      - "/standard/78501.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 20 May 2023 16:21:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 20 May 2023 16:21:46 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=DD3D4B7F8EBE120A4E4F518F57EA029D; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 20 May 2023 16:21:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 20 May 2023 16:21:46 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=893E1A8463420A8DF905DFF75A4C3B51; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 20 May 2023 16:21:46 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:46 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 20 May 2023 16:21:47 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '8'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:47 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C0B811AC81AB430C1F6AD2A90659C453; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 20 May 2023 16:21:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:47 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=57C56B29D3B93B8CEA921FE2D83A94FF; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 20 May 2023 16:21:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:48 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=01B2C53CE1FFE793652DCE1D4771202D; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 20 May 2023 16:21:52 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 20 May 2023 16:21:52 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=58306263AFEFCEEFC140406DB3DAA91D; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 20 May 2023 16:21:53 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 20 May 2023 16:21:53 GMT
recorded_with: VCR 6.1.0
