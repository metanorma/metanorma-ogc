---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/17-080R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1346'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c4f72310b0dc880606dd69b194909729bdbe4b8fc7aa74d99fec1d07daab0ab8"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 7314:45D5:101BB4:1821C0:63FC7A76
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 Feb 2023 09:40:07 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11282-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1677490807.745344,VS0,VE297
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - de219d89a2f9459e9d19a62fbf77529651ffa69d
      Expires:
      - Mon, 27 Feb 2023 09:45:07 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjEKaWQ6IDE3LTA4MHIyCnRpdGxlOgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogdGl0bGUtbWFpbgotIGNvbnRlbnQ6IENEQiBNdWx0aS1TcGVjdHJhbCBJbWFnZXJ5IEV4dGVuc2lvbgogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogbWFpbgpsaW5rOgotIGNvbnRlbnQ6IGh0dHBzOi8vZG9jcy5vZ2Mub3JnL2lzLzE3LTA4MHIyLzE3LTA4MHIyLmh0bWwKICB0eXBlOiBvYnAKdHlwZTogc3RhbmRhcmQKZG9jaWQ6Ci0gaWQ6IDE3LTA4MHIyCiAgdHlwZTogT0dDCiAgcHJpbWFyeTogdHJ1ZQpkYXRlOgotIHR5cGU6IHB1Ymxpc2hlZAogIHZhbHVlOiAnMjAxOC0wOS0yMCcKY29udHJpYnV0b3I6Ci0gcGVyc29uOgogICAgbmFtZToKICAgICAgY29tcGxldGVuYW1lOgogICAgICAgIGNvbnRlbnQ6IFJ5YW4gRnJhbnoKICByb2xlOgogIC0gdHlwZTogYXV0aG9yCi0gb3JnYW5pemF0aW9uOgogICAgbmFtZToKICAgIC0gY29udGVudDogT3BlbiBHZW9zcGF0aWFsIENvbnNvcnRpdW0KICByb2xlOgogIC0gdHlwZTogcHVibGlzaGVyCmVkaXRpb246CiAgY29udGVudDogJzInCnJldmRhdGU6ICcyMDE4LTA5LTIwJwpsYW5ndWFnZToKLSBlbgpzY3JpcHQ6Ci0gTGF0bgphYnN0cmFjdDoKLSBjb250ZW50OiAnVGhlIOKAnE11bHRpLVNwZWN0cmFsIEltYWdlcnnigJ0gZXh0ZW5zaW9uIGRlZmluZXMgaG93IHRvIGVuY29kZSBhbmQgc3RvcmUKICAgIHJlZmxlY3RlZCBlbGVjdHJvbWFnbmV0aWMgcmFkaWF0aW9uIGZyb20gdGhlIGluZnJhcmVkIHdhdmVsZW5ndGhzIGludG8gYSBDREIuICBUaGUKICAgIHBvcnRpb24gb2YgdGhlIHNwZWN0cnVtIHRhcmdldGVkIGlzIGJldHdlZW4gdGhlIHZpc2libGUgc3BlY3RydW0gKGN1cnJlbnQgaW1hZ2VyeQogICAgYW5kIHRleHR1cmUgaW4gQ0RCKSwgYW5kIGxvbmdlciB3YXZlbGVuZ3RoIGluZnJhcmVkIHRoYXQgaXMgcHJpbWFyaWx5IGVtaXNzaXZlCiAgICBhbmQgY2FuIGJlIHNpbXVsYXRlZCBiYXNlZCBvbiB0aGUgbWF0ZXJpYWwgdGVtcGVyYXR1cmUuICcKICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgpkb2N0eXBlOiBzdGFuZGFyZApzdWJkb2N0eXBlOiBpbXBsZW1lbnRhdGlvbgplZGl0b3JpYWxncm91cDoKICBjb21taXR0ZWU6IHRlY2huaWNhbApleHQ6CiAgc2NoZW1hLXZlcnNpb246IHYxLjAuMQo=
  recorded_at: Mon, 27 Feb 2023 09:40:06 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-165R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1744'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"74d5f7a517f5e61e185f7fa4f8aaca202142149690d169206274d0f1335129ae"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - FFDC:4D58:3A37A:759CE:63FC7A76
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 Feb 2023 09:40:07 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11233-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1677490807.767639,VS0,VE323
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 94aa75c0b93c496c8a3a79fc8106ac32b528ca83
      Expires:
      - Mon, 27 Feb 2023 09:45:07 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.1
        id: 11-165r2
        title:
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=51908
          type: obp
        type: standard
        docid:
        - id: 11-165r2
          type: OGC
          primary: true
        date:
        - type: published
          value: '2013-01-03'
        contributor:
        - person:
            name:
              completename:
                content: 'Ben Domenico and Stefano Nativi '
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        edition:
          content: '2'
        revdate: '2013-01-03'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "The OGC netCDF encoding supports electronic encoding of geospatial data,
            that is, digital geospatial information representing space and time-varying phenomena.\r\nThis
            standard specifies the CF-netCDF data model extension. \r\nThis standard specifies
            the CF-netCDF data model mapping onto the ISO 19123 coverage schema. \r\nThis
            standard deals with multi-dimensional gridded data and multi-dimensional multi-point
            data.\r\nIn particular, this extension standard encoding profile is limited to
            multi-point, and regular and warped grids; however, irregular grids are important
            in the CF-netCDF community and work is underway to expand the CF-netCDF to encompass
            other coverages types, including irregular gridded datasets.\r\n"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Mon, 27 Feb 2023 09:40:06 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-157.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.3
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1561'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"d10bd37bf20c763cc29e8b7ffe3971e49776e47a82743cefa18f96b5a0584960"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 2760:3A99:1A06B4:275E6B:63FC7A76
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 Feb 2023 09:40:07 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11230-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1677490807.769342,VS0,VE339
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 27fd3b88085876ed7229bba35686035e2b35f7ad
      Expires:
      - Mon, 27 Feb 2023 09:45:07 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.1
        id: 11-157
        title:
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-intro
        - content: Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0 - Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=46435
          type: obp
        type: standard
        docid:
        - id: 11-157
          type: OGC
          primary: true
        date:
        - type: published
          value: '2011-10-18'
        contributor:
        - person:
            name:
              completename:
                content: Jim Greenwood
          role:
          - type: author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - type: publisher
        revdate: '2011-10-18'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "This document being corrected specifies many of the aspects that are,
            or should be, common to all or multiple OWS interface Implementation Specifications.
            The Common Implementation Specification aspects specified by this document currently
            include:\r\na) Operation request and response contents, most partial\r\nb) Parameters
            and data structures included in operation requests and responses c) XML and KVP
            encoding of operation requests and responses"
          language:
          - en
          script:
          - Latn
          format: text/plain
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
        ext:
          schema-version: v1.0.1
  recorded_at: Mon, 27 Feb 2023 09:40:06 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 27 Feb 2023 09:40:07 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:07 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 27 Feb 2023 09:40:07 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:07 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 27 Feb 2023 09:40:08 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:09 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=30C9C7A8E74FC1CD1BD51DEDAA8108FA; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Feb 2023 09:40:09 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Feb 2023 09:40:09 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/85/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=93737558DDACBF0E159B1CB67C3E9A80; Path=/; Secure; HttpOnly
      Location:
      - "/standard/78501.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Feb 2023 09:40:09 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Feb 2023 09:40:09 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=36B8592BD90BC62D3432E18550E8FBD8; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Feb 2023 12:40:09 MSK
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Feb 2023 09:40:10 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B5B0A5D52EE9E8C4534300C573586043; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 27 Feb 2023 12:40:10 MSK
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:11 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C695515B30140B6D360AE923B106A035; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 27 Feb 2023 09:40:10 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:11 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F4A087652228B3D907C326DAC56E5DB8; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 27 Feb 2023 12:40:11 MSK
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:12 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 27 Feb 2023 09:40:12 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '11'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:13 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=896CF3176F13CB1F16B883965F9F8433; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Feb 2023 09:40:19 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Feb 2023 09:40:19 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A058CD497223686FB5B1E552EF3210A5; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 27 Feb 2023 09:40:21 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Feb 2023 09:40:23 GMT
recorded_with: VCR 6.1.0
