---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-165R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '772'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c6d7bba8dc0b7e9dbb2862a77247753880dd2bc85a2a790d75e4958a1682521b"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '0832:3A35:2BAFA:40440:6356752C'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11245-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1666610477.962216,VS0,VE303
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 4bb5035ec44724e4b66b5673f9547ac013a1d08a
      Expires:
      - Mon, 24 Oct 2022 11:26:17 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        id: 11-165r2
        title:
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: CF-netCDF3 Data Model Extension standard
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=51908
          type: obp
        type: standard
        docid:
        - id: 11-165r2
          type: OGC
          primary: true
        date:
        - type: published
          value: '2013-01-03'
        contributor:
        - person:
            name:
              completename:
                content: 'Ben Domenico and Stefano Nativi '
          role:
          - author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - publisher
        edition:
          content: '2'
        revdate: '2013-01-03'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "The OGC netCDF encoding supports electronic encoding of geospatial data,
            that is, digital geospatial information representing space and time-varying phenomena.\r\nThis
            standard specifies the CF-netCDF data model extension. \r\nThis standard specifies
            the CF-netCDF data model mapping onto the ISO 19123 coverage schema. \r\nThis
            standard deals with multi-dimensional gridded data and multi-dimensional multi-point
            data.\r\nIn particular, this extension standard encoding profile is limited to
            multi-point, and regular and warped grids; however, irregular grids are important
            in the CF-netCDF community and work is underway to expand the CF-netCDF to encompass
            other coverages types, including irregular gridded datasets.\r\n"
          language:
          - en
          script:
          - Latn
          format: text/plain
        fetched: '2022-10-23'
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
  recorded_at: Mon, 24 Oct 2022 11:21:17 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/17-080R2.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '620'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b498e5bdc76d1886d155a0d5e52854fe5526675babe711e4a782981525f5e17d"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '0818:7CE6:B4532:1CB375:6356752C'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11258-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1666610477.957019,VS0,VE555
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - e12675c9b75faefc977c9e1ca540001d6a1d5a41
      Expires:
      - Mon, 24 Oct 2022 11:26:17 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCmlkOiAxNy0wODByMgp0aXRsZToKLSBjb250ZW50OiBDREIgTXVsdGktU3BlY3RyYWwgSW1hZ2VyeSBFeHRlbnNpb24KICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IHRpdGxlLW1haW4KLSBjb250ZW50OiBDREIgTXVsdGktU3BlY3RyYWwgSW1hZ2VyeSBFeHRlbnNpb24KICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IG1haW4KbGluazoKLSBjb250ZW50OiBodHRwczovL2RvY3Mub2djLm9yZy9pcy8xNy0wODByMi8xNy0wODByMi5odG1sCiAgdHlwZTogb2JwCnR5cGU6IHN0YW5kYXJkCmRvY2lkOgotIGlkOiAxNy0wODByMgogIHR5cGU6IE9HQwogIHByaW1hcnk6IHRydWUKZGF0ZToKLSB0eXBlOiBwdWJsaXNoZWQKICB2YWx1ZTogJzIwMTgtMDktMjAnCmNvbnRyaWJ1dG9yOgotIHBlcnNvbjoKICAgIG5hbWU6CiAgICAgIGNvbXBsZXRlbmFtZToKICAgICAgICBjb250ZW50OiBSeWFuIEZyYW56CiAgcm9sZToKICAtIGF1dGhvcgotIG9yZ2FuaXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNvbnRlbnQ6IE9wZW4gR2Vvc3BhdGlhbCBDb25zb3J0aXVtCiAgcm9sZToKICAtIHB1Ymxpc2hlcgplZGl0aW9uOgogIGNvbnRlbnQ6ICcyJwpyZXZkYXRlOiAnMjAxOC0wOS0yMCcKbGFuZ3VhZ2U6Ci0gZW4Kc2NyaXB0OgotIExhdG4KYWJzdHJhY3Q6Ci0gY29udGVudDogJ1RoZSDigJxNdWx0aS1TcGVjdHJhbCBJbWFnZXJ54oCdIGV4dGVuc2lvbiBkZWZpbmVzIGhvdyB0byBlbmNvZGUgYW5kIHN0b3JlCiAgICByZWZsZWN0ZWQgZWxlY3Ryb21hZ25ldGljIHJhZGlhdGlvbiBmcm9tIHRoZSBpbmZyYXJlZCB3YXZlbGVuZ3RocyBpbnRvIGEgQ0RCLiAgVGhlCiAgICBwb3J0aW9uIG9mIHRoZSBzcGVjdHJ1bSB0YXJnZXRlZCBpcyBiZXR3ZWVuIHRoZSB2aXNpYmxlIHNwZWN0cnVtIChjdXJyZW50IGltYWdlcnkKICAgIGFuZCB0ZXh0dXJlIGluIENEQiksIGFuZCBsb25nZXIgd2F2ZWxlbmd0aCBpbmZyYXJlZCB0aGF0IGlzIHByaW1hcmlseSBlbWlzc2l2ZQogICAgYW5kIGNhbiBiZSBzaW11bGF0ZWQgYmFzZWQgb24gdGhlIG1hdGVyaWFsIHRlbXBlcmF0dXJlLiAnCiAgbGFuZ3VhZ2U6CiAgLSBlbgogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KZmV0Y2hlZDogJzIwMjItMTAtMjMnCmRvY3R5cGU6IHN0YW5kYXJkCnN1YmRvY3R5cGU6IGltcGxlbWVudGF0aW9uCmVkaXRvcmlhbGdyb3VwOgogIGNvbW1pdHRlZTogdGVjaG5pY2FsCg==
  recorded_at: Mon, 24 Oct 2022 11:21:17 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-ogc/main/data/11-157.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '666'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"880c01a7fa0af8074b2b9e3e08831de7ba714d541f92122aaaf8180435f419d4"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - '0812:37FA:150C3:2F7C1:6356752C'
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11261-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1666610477.957175,VS0,VE702
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 4d959cbeaea54d97bcec781a11a4abf5cf479710
      Expires:
      - Mon, 24 Oct 2022 11:26:17 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        id: 11-157
        title:
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-intro
        - content: Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: title-main
        - content: Corrigendum 1 for OGC Web Services Common Standard v2.0.0 - Multilingual
          language:
          - en
          script:
          - Latn
          format: text/plain
          type: main
        link:
        - content: https://portal.ogc.org/files/?artifact_id=46435
          type: obp
        type: standard
        docid:
        - id: 11-157
          type: OGC
          primary: true
        date:
        - type: published
          value: '2011-10-18'
        contributor:
        - person:
            name:
              completename:
                content: Jim Greenwood
          role:
          - author
        - organization:
            name:
            - content: Open Geospatial Consortium
          role:
          - publisher
        revdate: '2011-10-18'
        language:
        - en
        script:
        - Latn
        abstract:
        - content: "This document being corrected specifies many of the aspects that are,
            or should be, common to all or multiple OWS interface Implementation Specifications.
            The Common Implementation Specification aspects specified by this document currently
            include:\r\na) Operation request and response contents, most partial\r\nb) Parameters
            and data structures included in operation requests and responses c) XML and KVP
            encoding of operation requests and responses"
          language:
          - en
          script:
          - Latn
          format: text/plain
        fetched: '2022-10-23'
        doctype: standard
        subdoctype: implementation
        editorialgroup:
          committee: technical
  recorded_at: Mon, 24 Oct 2022 11:21:17 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-8","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:18 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-61","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:18 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 8000-110","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 24 Oct 2022 11:21:17 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:18 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/08/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=29B6E965401374C31AEC28BD0AE54464; Path=/; Secure; HttpOnly
      Location:
      - "/standard/60805.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 24 Oct 2022 11:21:19 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 24 Oct 2022 11:21:19 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/30/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F7D306F9D6B7CAA0E4B64DCDF1E04395; Path=/; Secure; HttpOnly
      Location:
      - "/standard/63086.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 24 Oct 2022 11:21:18 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 24 Oct 2022 11:21:19 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/85/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=0DE61C2AAD8A00AB9CADFDB164A342B7; Path=/; Secure; HttpOnly
      Location:
      - "/standard/78501.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 24 Oct 2022 11:21:18 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 24 Oct 2022 11:21:19 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/60805.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8BEE78052C706CD9C0F783B17A6DEA34; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 24 Oct 2022 11:21:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:21 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/63086.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=08C300B20939BDEE5D818D6B8EC7D6DC; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 24 Oct 2022 11:21:20 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:22 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/78501.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=E5BE37B80B473622DF464C009223EBD8; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 24 Oct 2022 11:21:21 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:22 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 9","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 24 Oct 2022 11:21:22 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '5'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:23 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F0BE5395C54E218C2983D732293F33EF; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3589.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 24 Oct 2022 11:21:27 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 24 Oct 2022 11:21:28 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3589.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=703002ACC208896A9B36F9899F9E4ABD; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 24 Oct 2022 11:21:30 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 24 Oct 2022 11:21:30 GMT
recorded_with: VCR 6.1.0
